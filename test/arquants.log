2020-07-18 21:50:12.479995 - {"id": 11, "strategy_id": "TASA_FZ", "execution_id": 159512659976, "type": "EV", "timestamp": 1595127011.808744, "event_id": 6, "event_type": "PA", "description": "Se apreto pausa, cancelando ordenes"}
2020-07-18 21:54:04.111554 - {"id": 1, "strategy_id": "TASA_FZ", "execution_id": 159512724242, "type": "EV", "timestamp": 1595127242.41601, "event_id": 1, "event_type": "INI", "ws_conn": "ws://ip:port/", "improve_rate_max_size": "100", "initial_position": "", "improve_rate_insts": "0", "min_trades_rate": "0.001", "debug": "True", "min_order_amount": "100", "max_order_amount": "200000", "stop_loss": "0.01", "timer_contingency_s": "60", "stop_hour": "18:59:50", "cant_stock": "2", "bond_tick": "0.5", "stock_tick": "0.05", "bond_commission": "0.01", "stock_commission": "0.09", "max": "20000000", "days": "2", "reversion_rate": "0", "max_rate": "2", "min_rate": "1", "self": "--error-serializing--"}
2020-07-18 21:54:04.112761 - {"id": 2, "strategy_id": "TASA_FZ", "execution_id": 159512724242, "type": "EV", "timestamp": 1595127242.496828, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY", "event_id": 2, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"bid_px": null, "bid_qty": null, "bid_px_2": null, "bid_qty_2": null}, "MERV - XMEV - AY24 - 48hs": {"bid_px": 3000.5, "bid_qty": 101.0}}}
2020-07-18 21:54:04.113833 - {"id": 3, "strategy_id": "TASA_FZ", "execution_id": 159512724242, "type": "EV", "timestamp": 1595127242.497458, "index": 0, "sub_strategy": "Restore", "sub_state": "SELL", "event_id": 3, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"offer_px": null, "offer_qty": null}, "MERV - XMEV - AY24 - 48hs": {"offer_px": null, "offer_qty": null}}}
2020-07-18 21:54:04.114831 - {"id": 4, "strategy_id": "TASA_FZ", "execution_id": 159512724242, "type": "RE", "timestamp": 1595127242.499889, "strategy": 0, "index": 0, "event_id": 3, "response_type": "NO", "order_id": "a88163132b414b5", "side": "BUY", "px": 201.0, "qty": 2962.6, "instrument": "MERV - XMEV - AY24 - CI"}
2020-07-18 21:54:04.116068 - {"id": 5, "strategy_id": "TASA_FZ", "execution_id": 159512724242, "type": "PR", "timestamp": 1595127242.49994, "event_id": 3, "internal_log": " {best_price: 2962.6 - min_price: 2978.75 - (bid_px_ci: [None, None] bid_px_48: 3000.5 tick: 0.05 commission: 0.09 new_price: 2962.6}| {CASE_1_1_1_1}| {min price de 48hs para calcular el size: 2984.25}| {Considerando nivel de precio: 3000.5}| {Considerando nivel de precio: 3000.0}| {Creating Signal: 201.0 at 2962.6 - BEST: True}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Strategy: 0 - PASAMOS DE ESTADO BUY A ESTADO BUY_HOLD. En index: 0}|"}
2020-07-18 21:54:04.116812 - {"id": 6, "strategy_id": "TASA_FZ", "execution_id": 159512724242, "type": "EV", "timestamp": 1595127242.606084, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY_HOLD", "event_id": 4, "event_type": "OR", "order_id": "a88163132b414b5", "state": "Submitted", "last_px": null, "last_qty": null, "rem_size": 201.0}
2020-07-18 21:54:04.117607 - {"id": 7, "strategy_id": "TASA_FZ", "execution_id": 159512724242, "type": "PR", "timestamp": 1595127242.607963, "event_id": 4, "internal_log": " {MD not Change}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 21:54:04.118462 - {"id": 8, "strategy_id": "TASA_FZ", "execution_id": 159512724242, "type": "PR", "timestamp": 1595127242.611731, "event_id": 4, "internal_log": " {MD not Change}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 21:54:04.130920 - {"id": 9, "strategy_id": "TASA_FZ", "execution_id": 159512724242, "type": "EV", "timestamp": 1595127242.687217, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY_HOLD", "event_id": 5, "event_type": "OR", "order_id": "a88163132b414b5", "state": null, "last_px": null, "last_qty": null, "rem_size": 201.0}
2020-07-18 21:54:04.131832 - {"id": 10, "strategy_id": "TASA_FZ", "execution_id": 159512724242, "type": "PR", "timestamp": 1595127242.687343, "event_id": 5, "internal_log": " {Strategy: 0 - PASAMOS DE ESTADO BUY_HOLD A ESTADO GENERATING_SIGNAL. En index: 0}| {Strategy: 0 - PASAMOS DE ESTADO GENERATING_SIGNAL A ESTADO BUY. En index: 0}|"}
2020-07-18 21:54:40.056475 - {"id": 11, "strategy_id": "TASA_FZ", "execution_id": 159512724242, "type": "EV", "timestamp": 1595127278.991055, "event_id": 6, "event_type": "PA", "description": "Se apreto pausa, cancelando ordenes"}
2020-07-18 21:55:10.654056 - {"id": 1, "strategy_id": "TASA_FZ", "execution_id": 159512730900, "type": "EV", "timestamp": 1595127308.996922, "event_id": 1, "event_type": "INI", "ws_conn": "ws://ip:port/", "improve_rate_max_size": "100", "initial_position": "", "improve_rate_insts": "0", "min_trades_rate": "0.001", "debug": "True", "min_order_amount": "100", "max_order_amount": "200000", "stop_loss": "0.01", "timer_contingency_s": "60", "stop_hour": "18:59:50", "cant_stock": "2", "bond_tick": "0.5", "stock_tick": "0.05", "bond_commission": "0.01", "stock_commission": "0.09", "max": "20000000", "days": "2", "reversion_rate": "0", "max_rate": "2", "min_rate": "1", "self": "--error-serializing--"}
2020-07-18 21:55:10.655218 - {"id": 2, "strategy_id": "TASA_FZ", "execution_id": 159512730900, "type": "EV", "timestamp": 1595127309.073715, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY", "event_id": 2, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"bid_px": null, "bid_qty": null, "bid_px_2": null, "bid_qty_2": null}, "MERV - XMEV - AY24 - 48hs": {"bid_px": 3000.5, "bid_qty": 101.0}}}
2020-07-18 21:55:10.656053 - {"id": 3, "strategy_id": "TASA_FZ", "execution_id": 159512730900, "type": "EV", "timestamp": 1595127309.074255, "index": 0, "sub_strategy": "Restore", "sub_state": "SELL", "event_id": 3, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"offer_px": null, "offer_qty": null}, "MERV - XMEV - AY24 - 48hs": {"offer_px": null, "offer_qty": null}}}
2020-07-18 21:55:10.656962 - {"id": 4, "strategy_id": "TASA_FZ", "execution_id": 159512730900, "type": "RE", "timestamp": 1595127309.07726, "strategy": 0, "index": 0, "event_id": 3, "response_type": "NO", "order_id": "22fd01f7c9cd4a6", "side": "BUY", "px": 2962.6, "qty": 201.0, "instrument": "MERV - XMEV - AY24 - CI"}
2020-07-18 21:55:10.658208 - {"id": 5, "strategy_id": "TASA_FZ", "execution_id": 159512730900, "type": "PR", "timestamp": 1595127309.07732, "event_id": 3, "internal_log": " {best_price: 2962.6 - min_price: 2978.75 - (bid_px_ci: [None, None] bid_px_48: 3000.5 tick: 0.05 commission: 0.09 new_price: 2962.6}| {CASE_1_1_1_1}| {min price de 48hs para calcular el size: 2984.25}| {Considerando nivel de precio: 3000.5}| {Considerando nivel de precio: 3000.0}| {Creating Signal: 201.0 at 2962.6 - BEST: True}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Strategy: 0 - PASAMOS DE ESTADO BUY A ESTADO BUY_HOLD. En index: 0}|"}
2020-07-18 21:55:10.659120 - {"id": 6, "strategy_id": "TASA_FZ", "execution_id": 159512730900, "type": "EV", "timestamp": 1595127309.180121, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY_HOLD", "event_id": 4, "event_type": "OR", "order_id": "22fd01f7c9cd4a6", "state": "Submitted", "last_px": null, "last_qty": null, "rem_size": 201.0}
2020-07-18 21:55:10.659960 - {"id": 7, "strategy_id": "TASA_FZ", "execution_id": 159512730900, "type": "PR", "timestamp": 1595127309.183167, "event_id": 4, "internal_log": " {MD not Change}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 21:55:10.660732 - {"id": 8, "strategy_id": "TASA_FZ", "execution_id": 159512730900, "type": "PR", "timestamp": 1595127309.187155, "event_id": 4, "internal_log": " {MD not Change}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 21:55:10.672308 - {"id": 9, "strategy_id": "TASA_FZ", "execution_id": 159512730900, "type": "EV", "timestamp": 1595127309.260252, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY_HOLD", "event_id": 5, "event_type": "OR", "order_id": "22fd01f7c9cd4a6", "state": "Rejected", "last_px": null, "last_qty": null, "rem_size": 201.0}
2020-07-18 21:55:10.673291 - {"id": 10, "strategy_id": "TASA_FZ", "execution_id": 159512730900, "type": "PR", "timestamp": 1595127309.260373, "event_id": 5, "internal_log": " {Strategy: 0 - PASAMOS DE ESTADO BUY_HOLD A ESTADO GENERATING_SIGNAL. En index: 0}| {Strategy: 0 - PASAMOS DE ESTADO GENERATING_SIGNAL A ESTADO BUY. En index: 0}|"}
2020-07-18 21:57:01.604644 - {"id": 11, "strategy_id": "TASA_FZ", "execution_id": 159512730900, "type": "EV", "timestamp": 1595127421.436036, "event_id": 6, "event_type": "PA", "description": "Se apreto pausa, cancelando ordenes"}
2020-07-18 21:57:31.579334 - {"id": 1, "strategy_id": "TASA_FZ", "execution_id": 159512744984, "type": "EV", "timestamp": 1595127449.842391, "event_id": 1, "event_type": "INI", "ws_conn": "ws://ip:port/", "improve_rate_max_size": "100", "initial_position": "", "improve_rate_insts": "0", "min_trades_rate": "0.001", "debug": "True", "min_order_amount": "100", "max_order_amount": "200000", "stop_loss": "0.01", "timer_contingency_s": "60", "stop_hour": "18:59:50", "cant_stock": "2", "bond_tick": "0.5", "stock_tick": "0.05", "bond_commission": "0.01", "stock_commission": "0.09", "max": "20000000", "days": "2", "reversion_rate": "0", "max_rate": "2", "min_rate": "1", "self": "--error-serializing--"}
2020-07-18 21:57:31.580432 - {"id": 2, "strategy_id": "TASA_FZ", "execution_id": 159512744984, "type": "EV", "timestamp": 1595127449.916185, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY", "event_id": 2, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"bid_px": null, "bid_qty": null, "bid_px_2": null, "bid_qty_2": null}, "MERV - XMEV - AY24 - 48hs": {"bid_px": 3000.5, "bid_qty": 101.0}}}
2020-07-18 21:57:31.581250 - {"id": 3, "strategy_id": "TASA_FZ", "execution_id": 159512744984, "type": "EV", "timestamp": 1595127449.916672, "index": 0, "sub_strategy": "Restore", "sub_state": "SELL", "event_id": 3, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"offer_px": null, "offer_qty": null}, "MERV - XMEV - AY24 - 48hs": {"offer_px": null, "offer_qty": null}}}
2020-07-18 21:57:31.582200 - {"id": 4, "strategy_id": "TASA_FZ", "execution_id": 159512744984, "type": "RE", "timestamp": 1595127449.919404, "strategy": 0, "index": 0, "event_id": 3, "response_type": "NO", "order_id": "31a0ee18b887478", "side": "BUY", "px": 2962.6, "qty": 201.0, "instrument": "MERV - XMEV - AY24 - CI"}
2020-07-18 21:57:31.583372 - {"id": 5, "strategy_id": "TASA_FZ", "execution_id": 159512744984, "type": "PR", "timestamp": 1595127449.919455, "event_id": 3, "internal_log": " {best_price: 2962.6 - min_price: 2978.75 - (bid_px_ci: [None, None] bid_px_48: 3000.5 tick: 0.05 commission: 0.09 new_price: 2962.6}| {CASE_1_1_1_1}| {min price de 48hs para calcular el size: 2984.25}| {Considerando nivel de precio: 3000.5}| {Considerando nivel de precio: 3000.0}| {Creating Signal: 201.0 at 2962.6 - BEST: True}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Strategy: 0 - PASAMOS DE ESTADO BUY A ESTADO BUY_HOLD. En index: 0}|"}
2020-07-18 21:57:31.583993 - {"id": 6, "strategy_id": "TASA_FZ", "execution_id": 159512744984, "type": "EV", "timestamp": 1595127450.026541, "event_id": 4, "event_type": "ER", "description": "Ocurrio un error en la estrategia, cancelando ordenes"}
2020-07-18 21:57:31.584629 - {"id": 7, "strategy_id": "TASA_FZ", "execution_id": 159512744984, "type": "RE", "timestamp": 1595127450.053495, "strategy": 0, "index": -1, "event_id": 4, "response_type": "CO", "order_id": "31a0ee18b887478"}
2020-07-18 21:57:31.586246 - {"id": 8, "strategy_id": "TASA_FZ", "execution_id": 159512744984, "type": "PR", "timestamp": 1595127450.053912, "event_id": 4, "internal_log": " {Cancelando BIDS en CI: 31a0ee18b887478}| {Strategy: 0 - PASAMOS DE ESTADO BUY_HOLD A ESTADO BUY. En index: 0}| {Strategy: 1 - PASAMOS DE ESTADO SELL A ESTADO SELL. En index: 0}| {Time: 2020-07-19 02:57:30.053802 - 0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0}| {Time: 2020-07-19 02:57:30.053837 - -1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0}| {Time: 2020-07-19 02:57:30.053847 - Trades: 0 - Eventos: 2 - Ratio: 0.0 - New: 1 - Replace: 0 - Cancel: 1}| {Time: 2020-07-19 02:57:30.053853 - Monto Operado: Estrategia Tasa: 0 - Estrategia Reversion: 0 - Monto Max: 20000000}|"}
2020-07-18 21:59:23.709084 - {"id": 1, "strategy_id": "TASA_FZ", "execution_id": 159512756203, "type": "EV", "timestamp": 1595127562.032677, "event_id": 1, "event_type": "INI", "ws_conn": "ws://ip:port/", "improve_rate_max_size": "100", "initial_position": "", "improve_rate_insts": "0", "min_trades_rate": "0.001", "debug": "True", "min_order_amount": "100", "max_order_amount": "200000", "stop_loss": "0.01", "timer_contingency_s": "60", "stop_hour": "18:59:50", "cant_stock": "2", "bond_tick": "0.5", "stock_tick": "0.05", "bond_commission": "0.01", "stock_commission": "0.09", "max": "20000000", "days": "2", "reversion_rate": "0", "max_rate": "2", "min_rate": "1", "self": "--error-serializing--"}
2020-07-18 21:59:23.710290 - {"id": 2, "strategy_id": "TASA_FZ", "execution_id": 159512756203, "type": "EV", "timestamp": 1595127562.116412, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY", "event_id": 2, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"bid_px": null, "bid_qty": null, "bid_px_2": null, "bid_qty_2": null}, "MERV - XMEV - AY24 - 48hs": {"bid_px": 3000.5, "bid_qty": 101.0}}}
2020-07-18 21:59:23.711203 - {"id": 3, "strategy_id": "TASA_FZ", "execution_id": 159512756203, "type": "EV", "timestamp": 1595127562.116925, "index": 0, "sub_strategy": "Restore", "sub_state": "SELL", "event_id": 3, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"offer_px": null, "offer_qty": null}, "MERV - XMEV - AY24 - 48hs": {"offer_px": null, "offer_qty": null}}}
2020-07-18 21:59:23.711946 - {"id": 4, "strategy_id": "TASA_FZ", "execution_id": 159512756203, "type": "RE", "timestamp": 1595127562.120477, "strategy": 0, "index": 0, "event_id": 3, "response_type": "NO", "order_id": "0fb0341ec11b4ef", "side": "BUY", "px": 2962.6, "qty": 201.0, "instrument": "MERV - XMEV - AY24 - CI"}
2020-07-18 21:59:23.713274 - {"id": 5, "strategy_id": "TASA_FZ", "execution_id": 159512756203, "type": "PR", "timestamp": 1595127562.120528, "event_id": 3, "internal_log": " {best_price: 2962.6 - min_price: 2978.75 - (bid_px_ci: [None, None] bid_px_48: 3000.5 tick: 0.05 commission: 0.09 new_price: 2962.6}| {CASE_1_1_1_1}| {min price de 48hs para calcular el size: 2984.25}| {Considerando nivel de precio: 3000.5}| {Considerando nivel de precio: 3000.0}| {Creating Signal: 201.0 at 2962.6 - BEST: True}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Strategy: 0 - PASAMOS DE ESTADO BUY A ESTADO BUY_HOLD. En index: 0}|"}
2020-07-18 21:59:23.714134 - {"id": 6, "strategy_id": "TASA_FZ", "execution_id": 159512756203, "type": "EV", "timestamp": 1595127562.224787, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY_HOLD", "event_id": 4, "event_type": "OR", "order_id": "0fb0341ec11b4ef", "state": "Submitted", "last_px": null, "last_qty": null, "rem_size": 201.0}
2020-07-18 21:59:23.715109 - {"id": 7, "strategy_id": "TASA_FZ", "execution_id": 159512756203, "type": "PR", "timestamp": 1595127562.226717, "event_id": 4, "internal_log": " {MD not Change}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 21:59:23.715927 - {"id": 8, "strategy_id": "TASA_FZ", "execution_id": 159512756203, "type": "PR", "timestamp": 1595127562.231884, "event_id": 4, "internal_log": " {MD not Change}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 21:59:23.724554 - {"id": 9, "strategy_id": "TASA_FZ", "execution_id": 159512756203, "type": "EV", "timestamp": 1595127562.308857, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY_HOLD", "event_id": 5, "event_type": "OR", "order_id": "0fb0341ec11b4ef", "state": "Rejected", "last_px": null, "last_qty": null, "rem_size": 201.0}
2020-07-18 21:59:23.725462 - {"id": 10, "strategy_id": "TASA_FZ", "execution_id": 159512756203, "type": "PR", "timestamp": 1595127562.308939, "event_id": 5, "internal_log": " {Strategy: 0 - PASAMOS DE ESTADO BUY_HOLD A ESTADO GENERATING_SIGNAL. En index: 0}| {Strategy: 0 - PASAMOS DE ESTADO GENERATING_SIGNAL A ESTADO BUY. En index: 0}|"}
2020-07-18 22:04:18.648809 - {"id": 11, "strategy_id": "TASA_FZ", "execution_id": 159512756203, "type": "EV", "timestamp": 1595127857.743289, "event_id": 6, "event_type": "PA", "description": "Se apreto pausa, cancelando ordenes"}
2020-07-18 22:04:47.094307 - {"id": 1, "strategy_id": "TASA_FZ", "execution_id": 159512788527, "type": "EV", "timestamp": 1595127885.272281, "event_id": 1, "event_type": "INI", "ws_conn": "ws://ip:port/", "improve_rate_max_size": "100", "initial_position": "", "improve_rate_insts": "0", "min_trades_rate": "0.001", "debug": "True", "min_order_amount": "100", "max_order_amount": "200000", "stop_loss": "0.01", "timer_contingency_s": "60", "stop_hour": "18:59:50", "cant_stock": "2", "bond_tick": "0.5", "stock_tick": "0.05", "bond_commission": "0.01", "stock_commission": "0.09", "max": "20000000", "days": "2", "reversion_rate": "0", "max_rate": "2", "min_rate": "1", "self": "--error-serializing--"}
2020-07-18 22:04:47.095400 - {"id": 2, "strategy_id": "TASA_FZ", "execution_id": 159512788527, "type": "EV", "timestamp": 1595127885.352451, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY", "event_id": 2, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"bid_px": null, "bid_qty": null, "bid_px_2": null, "bid_qty_2": null}, "MERV - XMEV - AY24 - 48hs": {"bid_px": 3000.5, "bid_qty": 101.0}}}
2020-07-18 22:04:47.096335 - {"id": 3, "strategy_id": "TASA_FZ", "execution_id": 159512788527, "type": "EV", "timestamp": 1595127885.352985, "index": 0, "sub_strategy": "Restore", "sub_state": "SELL", "event_id": 3, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"offer_px": null, "offer_qty": null}, "MERV - XMEV - AY24 - 48hs": {"offer_px": null, "offer_qty": null}}}
2020-07-18 22:04:47.097297 - {"id": 4, "strategy_id": "TASA_FZ", "execution_id": 159512788527, "type": "RE", "timestamp": 1595127885.355885, "strategy": 0, "index": 0, "event_id": 3, "response_type": "NO", "order_id": "460657e9c3c04bf", "side": "BUY", "px": 2962.6, "qty": 201.0, "instrument": "MERV - XMEV - AY24 - CI"}
2020-07-18 22:04:47.098617 - {"id": 5, "strategy_id": "TASA_FZ", "execution_id": 159512788527, "type": "PR", "timestamp": 1595127885.356099, "event_id": 3, "internal_log": " {best_price: 2962.6 - min_price: 2978.75 - (bid_px_ci: [None, None] bid_px_48: 3000.5 tick: 0.05 commission: 0.09 new_price: 2962.6}| {CASE_1_1_1_1}| {min price de 48hs para calcular el size: 2984.25}| {Considerando nivel de precio: 3000.5}| {Considerando nivel de precio: 3000.0}| {Creating Signal: 201.0 at 2962.6 - BEST: True}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Strategy: 0 - PASAMOS DE ESTADO BUY A ESTADO BUY_HOLD. En index: 0}|"}
2020-07-18 22:04:47.099411 - {"id": 6, "strategy_id": "TASA_FZ", "execution_id": 159512788527, "type": "EV", "timestamp": 1595127885.475536, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY_HOLD", "event_id": 4, "event_type": "OR", "order_id": "460657e9c3c04bf", "state": "Submitted", "last_px": null, "last_qty": null, "rem_size": 201.0}
2020-07-18 22:04:47.100211 - {"id": 7, "strategy_id": "TASA_FZ", "execution_id": 159512788527, "type": "PR", "timestamp": 1595127885.477463, "event_id": 4, "internal_log": " {MD not Change}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 22:04:47.101073 - {"id": 8, "strategy_id": "TASA_FZ", "execution_id": 159512788527, "type": "PR", "timestamp": 1595127885.482973, "event_id": 4, "internal_log": " {MD not Change}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 22:04:47.102308 - {"id": 9, "strategy_id": "TASA_FZ", "execution_id": 159512788527, "type": "EV", "timestamp": 1595127885.541185, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY_HOLD", "event_id": 5, "event_type": "OR", "order_id": "460657e9c3c04bf", "state": "Rejected", "last_px": null, "last_qty": null, "rem_size": 201.0}
2020-07-18 22:04:47.103523 - {"id": 10, "strategy_id": "TASA_FZ", "execution_id": 159512788527, "type": "PR", "timestamp": 1595127885.541256, "event_id": 5, "internal_log": " {Strategy: 0 - PASAMOS DE ESTADO BUY_HOLD A ESTADO GENERATING_SIGNAL. En index: 0}| {Strategy: 0 - PASAMOS DE ESTADO GENERATING_SIGNAL A ESTADO BUY. En index: 0}|"}
2020-07-18 22:06:01.027412 - {"id": 11, "strategy_id": "TASA_FZ", "execution_id": 159512788527, "type": "EV", "timestamp": 1595127960.513117, "event_id": 6, "event_type": "PA", "description": "Se apreto pausa, cancelando ordenes"}
2020-07-18 22:06:39.131832 - {"id": 1, "strategy_id": "TASA_FZ", "execution_id": 159512799741, "type": "EV", "timestamp": 1595127997.414163, "event_id": 1, "event_type": "INI", "ws_conn": "ws://ip:port/", "improve_rate_max_size": "100", "initial_position": "", "improve_rate_insts": "0", "min_trades_rate": "0.001", "debug": "True", "min_order_amount": "100", "max_order_amount": "200000", "stop_loss": "0.01", "timer_contingency_s": "60", "stop_hour": "18:59:50", "cant_stock": "2", "bond_tick": "0.5", "stock_tick": "0.05", "bond_commission": "0.01", "stock_commission": "0.09", "max": "20000000", "days": "2", "reversion_rate": "0", "max_rate": "2", "min_rate": "1", "self": "--error-serializing--"}
2020-07-18 22:06:39.132954 - {"id": 2, "strategy_id": "TASA_FZ", "execution_id": 159512799741, "type": "EV", "timestamp": 1595127997.496971, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY", "event_id": 2, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"bid_px": null, "bid_qty": null, "bid_px_2": null, "bid_qty_2": null}, "MERV - XMEV - AY24 - 48hs": {"bid_px": 3000.5, "bid_qty": 101.0}}}
2020-07-18 22:06:39.133807 - {"id": 3, "strategy_id": "TASA_FZ", "execution_id": 159512799741, "type": "EV", "timestamp": 1595127997.497581, "index": 0, "sub_strategy": "Restore", "sub_state": "SELL", "event_id": 3, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"offer_px": null, "offer_qty": null}, "MERV - XMEV - AY24 - 48hs": {"offer_px": null, "offer_qty": null}}}
2020-07-18 22:06:39.134791 - {"id": 4, "strategy_id": "TASA_FZ", "execution_id": 159512799741, "type": "RE", "timestamp": 1595127997.501003, "strategy": 0, "index": 0, "event_id": 3, "response_type": "NO", "order_id": "1fe23ee9a7714f0", "side": "BUY", "px": 2962.6, "qty": 201.0, "instrument": "MERV - XMEV - AY24 - CI"}
2020-07-18 22:06:39.136043 - {"id": 5, "strategy_id": "TASA_FZ", "execution_id": 159512799741, "type": "PR", "timestamp": 1595127997.501249, "event_id": 3, "internal_log": " {best_price: 2962.6 - min_price: 2978.75 - (bid_px_ci: [None, None] bid_px_48: 3000.5 tick: 0.05 commission: 0.09 new_price: 2962.6}| {CASE_1_1_1_1}| {min price de 48hs para calcular el size: 2984.25}| {Considerando nivel de precio: 3000.5}| {Considerando nivel de precio: 3000.0}| {Creating Signal: 201.0 at 2962.6 - BEST: True}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Strategy: 0 - PASAMOS DE ESTADO BUY A ESTADO BUY_HOLD. En index: 0}|"}
2020-07-18 22:06:39.136827 - {"id": 6, "strategy_id": "TASA_FZ", "execution_id": 159512799741, "type": "EV", "timestamp": 1595127997.621534, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY_HOLD", "event_id": 4, "event_type": "OR", "order_id": "1fe23ee9a7714f0", "state": "Submitted", "last_px": null, "last_qty": null, "rem_size": 201.0}
2020-07-18 22:06:39.137634 - {"id": 7, "strategy_id": "TASA_FZ", "execution_id": 159512799741, "type": "PR", "timestamp": 1595127997.623354, "event_id": 4, "internal_log": " {MD not Change}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 22:06:39.138405 - {"id": 8, "strategy_id": "TASA_FZ", "execution_id": 159512799741, "type": "PR", "timestamp": 1595127997.630098, "event_id": 4, "internal_log": " {MD not Change}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 22:06:39.149067 - {"id": 9, "strategy_id": "TASA_FZ", "execution_id": 159512799741, "type": "EV", "timestamp": 1595127997.689365, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY_HOLD", "event_id": 5, "event_type": "OR", "order_id": "1fe23ee9a7714f0", "state": "Rejected", "last_px": null, "last_qty": null, "rem_size": 201.0}
2020-07-18 22:06:39.150050 - {"id": 10, "strategy_id": "TASA_FZ", "execution_id": 159512799741, "type": "PR", "timestamp": 1595127997.689431, "event_id": 5, "internal_log": " {Strategy: 0 - PASAMOS DE ESTADO BUY_HOLD A ESTADO GENERATING_SIGNAL. En index: 0}| {Strategy: 0 - PASAMOS DE ESTADO GENERATING_SIGNAL A ESTADO BUY. En index: 0}|"}
2020-07-18 22:08:43.075962 - {"id": 11, "strategy_id": "TASA_FZ", "execution_id": 159512799741, "type": "EV", "timestamp": 1595128122.927584, "event_id": 6, "event_type": "PA", "description": "Se apreto pausa, cancelando ordenes"}
2020-07-18 22:09:36.788474 - {"id": 1, "strategy_id": "TASA_FZ", "execution_id": 159512817496, "type": "EV", "timestamp": 1595128174.961478, "event_id": 1, "event_type": "INI", "ws_conn": "ws://ip:port/", "improve_rate_max_size": "100", "initial_position": "", "improve_rate_insts": "0", "min_trades_rate": "0.001", "debug": "True", "min_order_amount": "100", "max_order_amount": "200000", "stop_loss": "0.01", "timer_contingency_s": "60", "stop_hour": "18:59:50", "cant_stock": "2", "bond_tick": "0.5", "stock_tick": "0.05", "bond_commission": "0.01", "stock_commission": "0.09", "max": "20000000", "days": "2", "reversion_rate": "0", "max_rate": "2", "min_rate": "1", "self": "--error-serializing--"}
2020-07-18 22:09:36.789522 - {"id": 2, "strategy_id": "TASA_FZ", "execution_id": 159512817496, "type": "EV", "timestamp": 1595128175.039688, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY", "event_id": 2, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"bid_px": null, "bid_qty": null, "bid_px_2": null, "bid_qty_2": null}, "MERV - XMEV - AY24 - 48hs": {"bid_px": 3000.5, "bid_qty": 101.0}}}
2020-07-18 22:09:36.790311 - {"id": 3, "strategy_id": "TASA_FZ", "execution_id": 159512817496, "type": "EV", "timestamp": 1595128175.040256, "index": 0, "sub_strategy": "Restore", "sub_state": "SELL", "event_id": 3, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"offer_px": null, "offer_qty": null}, "MERV - XMEV - AY24 - 48hs": {"offer_px": null, "offer_qty": null}}}
2020-07-18 22:09:36.791139 - {"id": 4, "strategy_id": "TASA_FZ", "execution_id": 159512817496, "type": "RE", "timestamp": 1595128175.043268, "strategy": 0, "index": 0, "event_id": 3, "response_type": "NO", "order_id": "8f09cba06ec14f8", "side": "BUY", "px": 2962.6, "qty": 201.0, "instrument": "MERV - XMEV - AY24 - CI"}
2020-07-18 22:09:36.792258 - {"id": 5, "strategy_id": "TASA_FZ", "execution_id": 159512817496, "type": "PR", "timestamp": 1595128175.043319, "event_id": 3, "internal_log": " {best_price: 2962.6 - min_price: 2978.75 - (bid_px_ci: [None, None] bid_px_48: 3000.5 tick: 0.05 commission: 0.09 new_price: 2962.6}| {CASE_1_1_1_1}| {min price de 48hs para calcular el size: 2984.25}| {Considerando nivel de precio: 3000.5}| {Considerando nivel de precio: 3000.0}| {Creating Signal: 201.0 at 2962.6 - BEST: True}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Strategy: 0 - PASAMOS DE ESTADO BUY A ESTADO BUY_HOLD. En index: 0}|"}
2020-07-18 22:09:36.792971 - {"id": 6, "strategy_id": "TASA_FZ", "execution_id": 159512817496, "type": "EV", "timestamp": 1595128175.156837, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY_HOLD", "event_id": 4, "event_type": "OR", "order_id": "8f09cba06ec14f8", "state": "Submitted", "last_px": null, "last_qty": null, "rem_size": 201.0}
2020-07-18 22:09:36.793711 - {"id": 7, "strategy_id": "TASA_FZ", "execution_id": 159512817496, "type": "PR", "timestamp": 1595128175.158669, "event_id": 4, "internal_log": " {MD not Change}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 22:09:36.794435 - {"id": 8, "strategy_id": "TASA_FZ", "execution_id": 159512817496, "type": "PR", "timestamp": 1595128175.162872, "event_id": 4, "internal_log": " {MD not Change}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 22:09:36.795096 - {"id": 9, "strategy_id": "TASA_FZ", "execution_id": 159512817496, "type": "EV", "timestamp": 1595128175.231091, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY_HOLD", "event_id": 5, "event_type": "OR", "order_id": "8f09cba06ec14f8", "state": "Rejected", "last_px": null, "last_qty": null, "rem_size": 201.0}
2020-07-18 22:09:36.795744 - {"id": 10, "strategy_id": "TASA_FZ", "execution_id": 159512817496, "type": "PR", "timestamp": 1595128175.231167, "event_id": 5, "internal_log": " {Strategy: 0 - PASAMOS DE ESTADO BUY_HOLD A ESTADO GENERATING_SIGNAL. En index: 0}| {Strategy: 0 - PASAMOS DE ESTADO GENERATING_SIGNAL A ESTADO BUY. En index: 0}|"}
2020-07-18 22:12:03.710735 - {"id": 11, "strategy_id": "TASA_FZ", "execution_id": 159512817496, "type": "EV", "timestamp": 1595128322.764, "event_id": 6, "event_type": "PA", "description": "Se apreto pausa, cancelando ordenes"}
2020-07-18 22:12:33.271642 - {"id": 1, "strategy_id": "TASA_FZ", "execution_id": 159512835170, "type": "EV", "timestamp": 1595128351.698343, "event_id": 1, "event_type": "INI", "ws_conn": "ws://ip:port/", "improve_rate_max_size": "100", "initial_position": "", "improve_rate_insts": "0", "min_trades_rate": "0.001", "debug": "True", "min_order_amount": "100", "max_order_amount": "200000", "stop_loss": "0.01", "timer_contingency_s": "60", "stop_hour": "18:59:50", "cant_stock": "2", "bond_tick": "0.5", "stock_tick": "0.05", "bond_commission": "0.01", "stock_commission": "0.09", "max": "20000000", "days": "2", "reversion_rate": "0", "max_rate": "2", "min_rate": "1", "self": "--error-serializing--"}
2020-07-18 22:12:33.272006 - {"id": 2, "strategy_id": "TASA_FZ", "execution_id": 159512835170, "type": "EV", "timestamp": 1595128351.769269, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY", "event_id": 2, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"bid_px": null, "bid_qty": null, "bid_px_2": null, "bid_qty_2": null}, "MERV - XMEV - AY24 - 48hs": {"bid_px": 3000.5, "bid_qty": 101.0}}}
2020-07-18 22:12:33.272213 - {"id": 3, "strategy_id": "TASA_FZ", "execution_id": 159512835170, "type": "EV", "timestamp": 1595128351.769902, "index": 0, "sub_strategy": "Restore", "sub_state": "SELL", "event_id": 3, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"offer_px": null, "offer_qty": null}, "MERV - XMEV - AY24 - 48hs": {"offer_px": null, "offer_qty": null}}}
2020-07-18 22:12:33.272440 - {"id": 4, "strategy_id": "TASA_FZ", "execution_id": 159512835170, "type": "RE", "timestamp": 1595128351.772646, "strategy": 0, "index": 0, "event_id": 3, "response_type": "NO", "order_id": "045e7ceab5fe4bb", "side": "BUY", "px": 2962.6, "qty": 201.0, "instrument": "MERV - XMEV - AY24 - CI"}
2020-07-18 22:12:33.272734 - {"id": 5, "strategy_id": "TASA_FZ", "execution_id": 159512835170, "type": "PR", "timestamp": 1595128351.772699, "event_id": 3, "internal_log": " {best_price: 2962.6 - min_price: 2978.75 - (bid_px_ci: [None, None] bid_px_48: 3000.5 tick: 0.05 commission: 0.09 new_price: 2962.6}| {CASE_1_1_1_1}| {min price de 48hs para calcular el size: 2984.25}| {Considerando nivel de precio: 3000.5}| {Considerando nivel de precio: 3000.0}| {Creating Signal: 201.0 at 2962.6 - BEST: True}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Strategy: 0 - PASAMOS DE ESTADO BUY A ESTADO BUY_HOLD. En index: 0}|"}
2020-07-18 22:12:33.272920 - {"id": 6, "strategy_id": "TASA_FZ", "execution_id": 159512835170, "type": "EV", "timestamp": 1595128351.899168, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY_HOLD", "event_id": 4, "event_type": "OR", "order_id": "045e7ceab5fe4bb", "state": "Submitted", "last_px": null, "last_qty": null, "rem_size": 201.0}
2020-07-18 22:12:33.273132 - {"id": 7, "strategy_id": "TASA_FZ", "execution_id": 159512835170, "type": "PR", "timestamp": 1595128351.901574, "event_id": 4, "internal_log": " {MD not Change}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 22:12:33.273378 - {"id": 8, "strategy_id": "TASA_FZ", "execution_id": 159512835170, "type": "PR", "timestamp": 1595128351.908412, "event_id": 4, "internal_log": " {MD not Change}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 22:12:33.280711 - {"id": 9, "strategy_id": "TASA_FZ", "execution_id": 159512835170, "type": "EV", "timestamp": 1595128351.964628, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY_HOLD", "event_id": 5, "event_type": "OR", "order_id": "045e7ceab5fe4bb", "state": "Rejected", "last_px": null, "last_qty": null, "rem_size": 201.0}
2020-07-18 22:12:33.280982 - {"id": 10, "strategy_id": "TASA_FZ", "execution_id": 159512835170, "type": "PR", "timestamp": 1595128351.964712, "event_id": 5, "internal_log": " {Strategy: 0 - PASAMOS DE ESTADO BUY_HOLD A ESTADO GENERATING_SIGNAL. En index: 0}| {Strategy: 0 - PASAMOS DE ESTADO GENERATING_SIGNAL A ESTADO BUY. En index: 0}|"}
2020-07-18 22:15:47.379800 - {"id": 11, "strategy_id": "TASA_FZ", "execution_id": 159512835170, "type": "EV", "timestamp": 1595128546.361921, "event_id": 6, "event_type": "PA", "description": "Se apreto pausa, cancelando ordenes"}
2020-07-18 22:16:16.769630 - {"id": 1, "strategy_id": "TASA_FZ", "execution_id": 159512857505, "type": "EV", "timestamp": 1595128575.049083, "event_id": 1, "event_type": "INI", "ws_conn": "ws://ip:port/", "improve_rate_max_size": "100", "initial_position": "", "improve_rate_insts": "0", "min_trades_rate": "0.001", "debug": "True", "min_order_amount": "100", "max_order_amount": "200000", "stop_loss": "0.01", "timer_contingency_s": "60", "stop_hour": "18:59:50", "cant_stock": "2", "bond_tick": "0.5", "stock_tick": "0.05", "bond_commission": "0.01", "stock_commission": "0.09", "max": "20000000", "days": "2", "reversion_rate": "0", "max_rate": "2", "min_rate": "1", "self": "--error-serializing--"}
2020-07-18 22:16:16.770652 - {"id": 2, "strategy_id": "TASA_FZ", "execution_id": 159512857505, "type": "EV", "timestamp": 1595128575.121435, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY", "event_id": 2, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"bid_px": null, "bid_qty": null, "bid_px_2": null, "bid_qty_2": null}, "MERV - XMEV - AY24 - 48hs": {"bid_px": 3000.5, "bid_qty": 101.0}}}
2020-07-18 22:16:16.771448 - {"id": 3, "strategy_id": "TASA_FZ", "execution_id": 159512857505, "type": "EV", "timestamp": 1595128575.121963, "index": 0, "sub_strategy": "Restore", "sub_state": "SELL", "event_id": 3, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"offer_px": null, "offer_qty": null}, "MERV - XMEV - AY24 - 48hs": {"offer_px": null, "offer_qty": null}}}
2020-07-18 22:16:16.772322 - {"id": 4, "strategy_id": "TASA_FZ", "execution_id": 159512857505, "type": "RE", "timestamp": 1595128575.124696, "strategy": 0, "index": 0, "event_id": 3, "response_type": "NO", "order_id": "d35ede79b006411", "side": "BUY", "px": 2962.6, "qty": 201.0, "instrument": "MERV - XMEV - AY24 - CI"}
2020-07-18 22:16:16.773494 - {"id": 5, "strategy_id": "TASA_FZ", "execution_id": 159512857505, "type": "PR", "timestamp": 1595128575.12475, "event_id": 3, "internal_log": " {best_price: 2962.6 - min_price: 2978.75 - (bid_px_ci: [None, None] bid_px_48: 3000.5 tick: 0.05 commission: 0.09 new_price: 2962.6}| {CASE_1_1_1_1}| {min price de 48hs para calcular el size: 2984.25}| {Considerando nivel de precio: 3000.5}| {Considerando nivel de precio: 3000.0}| {Creating Signal: 201.0 at 2962.6 - BEST: True}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Strategy: 0 - PASAMOS DE ESTADO BUY A ESTADO BUY_HOLD. En index: 0}|"}
2020-07-18 22:16:16.774525 - {"id": 6, "strategy_id": "TASA_FZ", "execution_id": 159512857505, "type": "EV", "timestamp": 1595128575.243707, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY_HOLD", "event_id": 4, "event_type": "OR", "order_id": "d35ede79b006411", "state": "Submitted", "last_px": null, "last_qty": null, "rem_size": 201.0}
2020-07-18 22:16:16.775514 - {"id": 7, "strategy_id": "TASA_FZ", "execution_id": 159512857505, "type": "PR", "timestamp": 1595128575.245815, "event_id": 4, "internal_log": " {MD not Change}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 22:16:16.776735 - {"id": 8, "strategy_id": "TASA_FZ", "execution_id": 159512857505, "type": "PR", "timestamp": 1595128575.250971, "event_id": 4, "internal_log": " {MD not Change}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 22:16:16.777977 - {"id": 9, "strategy_id": "TASA_FZ", "execution_id": 159512857505, "type": "EV", "timestamp": 1595128575.313914, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY_HOLD", "event_id": 5, "event_type": "OR", "order_id": "d35ede79b006411", "state": "Rejected", "last_px": null, "last_qty": null, "rem_size": 201.0}
2020-07-18 22:16:16.779171 - {"id": 10, "strategy_id": "TASA_FZ", "execution_id": 159512857505, "type": "PR", "timestamp": 1595128575.313985, "event_id": 5, "internal_log": " {Strategy: 0 - PASAMOS DE ESTADO BUY_HOLD A ESTADO GENERATING_SIGNAL. En index: 0}| {Strategy: 0 - PASAMOS DE ESTADO GENERATING_SIGNAL A ESTADO BUY. En index: 0}|"}
2020-07-18 22:17:57.735067 - {"id": 11, "strategy_id": "TASA_FZ", "execution_id": 159512857505, "type": "EV", "timestamp": 1595128677.37507, "event_id": 6, "event_type": "PA", "description": "Se apreto pausa, cancelando ordenes"}
2020-07-18 22:18:28.967690 - {"id": 1, "strategy_id": "TASA_FZ", "execution_id": 159512870727, "type": "EV", "timestamp": 1595128707.273717, "event_id": 1, "event_type": "INI", "ws_conn": "ws://ip:port/", "improve_rate_max_size": "100", "initial_position": "", "improve_rate_insts": "0", "min_trades_rate": "0.001", "debug": "True", "min_order_amount": "100", "max_order_amount": "200000", "stop_loss": "0.01", "timer_contingency_s": "60", "stop_hour": "18:59:50", "cant_stock": "2", "bond_tick": "0.5", "stock_tick": "0.05", "bond_commission": "0.01", "stock_commission": "0.09", "max": "20000000", "days": "2", "reversion_rate": "0", "max_rate": "2", "min_rate": "1", "self": "--error-serializing--"}
2020-07-18 22:18:28.968990 - {"id": 2, "strategy_id": "TASA_FZ", "execution_id": 159512870727, "type": "EV", "timestamp": 1595128707.359163, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY", "event_id": 2, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"bid_px": null, "bid_qty": null, "bid_px_2": null, "bid_qty_2": null}, "MERV - XMEV - AY24 - 48hs": {"bid_px": 3000.5, "bid_qty": 101.0}}}
2020-07-18 22:18:28.969923 - {"id": 3, "strategy_id": "TASA_FZ", "execution_id": 159512870727, "type": "EV", "timestamp": 1595128707.359713, "index": 0, "sub_strategy": "Restore", "sub_state": "SELL", "event_id": 3, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"offer_px": null, "offer_qty": null}, "MERV - XMEV - AY24 - 48hs": {"offer_px": null, "offer_qty": null}}}
2020-07-18 22:18:28.970777 - {"id": 4, "strategy_id": "TASA_FZ", "execution_id": 159512870727, "type": "RE", "timestamp": 1595128707.362771, "strategy": 0, "index": 0, "event_id": 3, "response_type": "NO", "order_id": "2bb467cc6832454", "side": "BUY", "px": 2962.6, "qty": 201.0, "instrument": "MERV - XMEV - AY24 - CI"}
2020-07-18 22:18:28.971924 - {"id": 5, "strategy_id": "TASA_FZ", "execution_id": 159512870727, "type": "PR", "timestamp": 1595128707.362829, "event_id": 3, "internal_log": " {best_price: 2962.6 - min_price: 2978.75 - (bid_px_ci: [None, None] bid_px_48: 3000.5 tick: 0.05 commission: 0.09 new_price: 2962.6}| {CASE_1_1_1_1}| {min price de 48hs para calcular el size: 2984.25}| {Considerando nivel de precio: 3000.5}| {Considerando nivel de precio: 3000.0}| {Creating Signal: 201.0 at 2962.6 - BEST: True}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Strategy: 0 - PASAMOS DE ESTADO BUY A ESTADO BUY_HOLD. En index: 0}|"}
2020-07-18 22:18:28.972940 - {"id": 6, "strategy_id": "TASA_FZ", "execution_id": 159512870727, "type": "EV", "timestamp": 1595128707.472421, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY_HOLD", "event_id": 4, "event_type": "OR", "order_id": "2bb467cc6832454", "state": "Submitted", "last_px": null, "last_qty": null, "rem_size": 201.0}
2020-07-18 22:18:28.974040 - {"id": 7, "strategy_id": "TASA_FZ", "execution_id": 159512870727, "type": "PR", "timestamp": 1595128707.474337, "event_id": 4, "internal_log": " {MD not Change}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 22:18:28.974952 - {"id": 8, "strategy_id": "TASA_FZ", "execution_id": 159512870727, "type": "PR", "timestamp": 1595128707.478435, "event_id": 4, "internal_log": " {MD not Change}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 22:18:28.975679 - {"id": 9, "strategy_id": "TASA_FZ", "execution_id": 159512870727, "type": "EV", "timestamp": 1595128707.548737, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY_HOLD", "event_id": 5, "event_type": "OR", "order_id": "2bb467cc6832454", "state": "Rejected", "last_px": null, "last_qty": null, "rem_size": 201.0}
2020-07-18 22:18:28.976418 - {"id": 10, "strategy_id": "TASA_FZ", "execution_id": 159512870727, "type": "PR", "timestamp": 1595128707.548818, "event_id": 5, "internal_log": " {Strategy: 0 - PASAMOS DE ESTADO BUY_HOLD A ESTADO GENERATING_SIGNAL. En index: 0}| {Strategy: 0 - PASAMOS DE ESTADO GENERATING_SIGNAL A ESTADO BUY. En index: 0}|"}
2020-07-18 22:20:59.904941 - {"id": 11, "strategy_id": "TASA_FZ", "execution_id": 159512870727, "type": "EV", "timestamp": 1595128858.891541, "event_id": 6, "event_type": "PA", "description": "Se apreto pausa, cancelando ordenes"}
2020-07-18 22:21:45.063640 - {"id": 1, "strategy_id": "TASA_FZ", "execution_id": 159512890324, "type": "EV", "timestamp": 1595128903.237774, "event_id": 1, "event_type": "INI", "ws_conn": "ws://ip:port/", "improve_rate_max_size": "100", "initial_position": "", "improve_rate_insts": "0", "min_trades_rate": "0.001", "debug": "True", "min_order_amount": "100", "max_order_amount": "200000", "stop_loss": "0.01", "timer_contingency_s": "60", "stop_hour": "18:59:50", "cant_stock": "2", "bond_tick": "0.5", "stock_tick": "0.05", "bond_commission": "0.01", "stock_commission": "0.09", "max": "20000000", "days": "2", "reversion_rate": "0", "max_rate": "2", "min_rate": "1", "self": "--error-serializing--"}
2020-07-18 22:21:45.064822 - {"id": 2, "strategy_id": "TASA_FZ", "execution_id": 159512890324, "type": "EV", "timestamp": 1595128903.314239, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY", "event_id": 2, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"bid_px": null, "bid_qty": null, "bid_px_2": null, "bid_qty_2": null}, "MERV - XMEV - AY24 - 48hs": {"bid_px": 3000.5, "bid_qty": 101.0}}}
2020-07-18 22:21:45.065807 - {"id": 3, "strategy_id": "TASA_FZ", "execution_id": 159512890324, "type": "EV", "timestamp": 1595128903.314881, "index": 0, "sub_strategy": "Restore", "sub_state": "SELL", "event_id": 3, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"offer_px": null, "offer_qty": null}, "MERV - XMEV - AY24 - 48hs": {"offer_px": null, "offer_qty": null}}}
2020-07-18 22:21:45.066700 - {"id": 4, "strategy_id": "TASA_FZ", "execution_id": 159512890324, "type": "RE", "timestamp": 1595128903.317781, "strategy": 0, "index": 0, "event_id": 3, "response_type": "NO", "order_id": "83c4f7b64336428", "side": "BUY", "px": 2962.6, "qty": 201.0, "instrument": "MERV - XMEV - AY24 - CI"}
2020-07-18 22:21:45.067939 - {"id": 5, "strategy_id": "TASA_FZ", "execution_id": 159512890324, "type": "PR", "timestamp": 1595128903.317838, "event_id": 3, "internal_log": " {best_price: 2962.6 - min_price: 2978.75 - (bid_px_ci: [None, None] bid_px_48: 3000.5 tick: 0.05 commission: 0.09 new_price: 2962.6}| {CASE_1_1_1_1}| {min price de 48hs para calcular el size: 2984.25}| {Considerando nivel de precio: 3000.5}| {Considerando nivel de precio: 3000.0}| {Creating Signal: 201.0 at 2962.6 - BEST: True}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Strategy: 0 - PASAMOS DE ESTADO BUY A ESTADO BUY_HOLD. En index: 0}|"}
2020-07-18 22:21:45.068731 - {"id": 6, "strategy_id": "TASA_FZ", "execution_id": 159512890324, "type": "EV", "timestamp": 1595128903.421123, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY_HOLD", "event_id": 4, "event_type": "OR", "order_id": "83c4f7b64336428", "state": "Submitted", "last_px": null, "last_qty": null, "rem_size": 201.0}
2020-07-18 22:21:45.375950 - {"id": 7, "strategy_id": "TASA_FZ", "execution_id": 159512890324, "type": "PR", "timestamp": 1595128903.421177, "event_id": 4, "internal_log": " {test obj.Accepted = 2}| {test obj.Buy = 0}| {test obj.Canceled = 5}| {test obj.Cancelled = 5}| {test obj.Close = 1}| {test obj.Completed = 4}| {test obj.Created = 0}| {test obj.DAY = datetime.timedelta(0)}| {test obj.ExecType = <bound method OrderBase.ExecType of <class 'arquants.brokers.rofxbroker.IBOrder'>>}| {test obj.ExecTypes = ['Market', 'Close', 'Limit', 'Stop', 'StopLimit', 'StopTrail', 'StopTrailLimit', 'Historical']}| {test obj.Expired = 6}| {test obj.Historical = 7}| {test obj.Limit = 2}| {test obj.Margin = 7}| {test obj.Market = 0}| {test obj.MarketToLimit = range(8, 9)}| {test obj.OrdTypes = ['Buy', 'Sell']}| {test obj.Partial = 3}| {test obj.Rejected = 8}| {test obj.Sell = 1}| {test obj.Status = ['Created', 'Submitted', 'Accepted', 'Partial', 'Completed', 'Canceled', 'Expired', 'Margin', 'Rejected']}| {test obj.Stop = 3}| {test obj.StopLimit = 4}| {test obj.StopTrail = 5}| {test obj.StopTrailLimit = 6}| {test obj.Submitted = 1}| {test obj.T_Close = 0}| {test obj.T_Date = 2}| {test obj.T_Day = 1}| {test obj.T_None = 3}| {test obj.V_None = range(0, 1)}| {test obj._IBOrdTypes = {None: 'MKT', 0: 'MKT', 2: 'LMT', 1: 'MOC', 3: 'STP', 4: 'STPLMT', 5: 'TRAIL', 6: 'TRAIL LIMIT'}}| {test obj.__class__ = <class 'arquants.brokers.rofxbroker.IBOrder'>}| {test obj.__delattr__ = <method-wrapper '__delattr__' of IBOrder object at 0x7f3295f95f60>}| {test obj.__dict__ = {'params': <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f3296052828>, 'p': <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f3296052828>, '_willexpire': False, 'ordtype': 0, 'ref': 1, 'broker': <arquants.brokers.rofxbroker.IBBroker object at 0x7f329a5d1400>, 'info': AutoOrderedDict(), 'comminfo': <arquants.brokers.rofxbroker.IBCommInfo object at 0x7f3295f95dd8>, 'triggered': False, '_active': True, 'status': 1, '_plimit': None, 'created': <backtrader.order.OrderData object at 0x7f3295fe0b70>, '_limitoffset': 0.0, 'executed': <backtrader.order.OrderData object at 0x7f3295f95ef0>, 'position': 0, 'dteos': 737625.9999999999, 'm_orderType': 'LMT', 'm_permid': 0, 'm_action': 'BUY', 'm_lmtPrice': 2962.6, 'm_auxPrice': 0.0, 'm_totalQuantity': 201.0, 'abs_size': 201.0, 'm_transmit': True, 'm_tif': 'GTC', 'm_ocaType': 1, 'm_clientId': 9598, 'm_orderId': '83c4f7b64336428', 'plen': 1, 'm_ocaGroup': 'eec439d0-66da-4046-8471-48a1bbb81165'}}| {test obj.__dir__ = <built-in method __dir__ of IBOrder object at 0x7f3295f95f60>}| {test obj.__doc__ = \"Subclasses the IBPy order to provide the minimum extra functionality\\n    needed to be compatible with the internally defined orders\\n\\n    Once ``OrderBase`` has processed the parameters, the __init__ method takes\\n    over to use the parameter values and set the appropriate values in the\\n    ib.ext.Order.Order object\\n\\n    Any extra parameters supplied with kwargs are applied directly to the\\n    ib.ext.Order.Order object, which could be used as follows::\\n\\n      Example: if the 4 order execution types directly supported by\\n      ``backtrader`` are not enough, in the case of for example\\n      *Interactive Brokers* the following could be passed as *kwargs*::\\n\\n        orderType='LIT', lmtPrice=10.0, auxPrice=9.8\\n\\n      This would override the settings created by ``backtrader`` and\\n      generate a ``LIMIT IF TOUCHED`` order with a *touched* price of 9.8\\n      and a *limit* price of 10.0.\\n\\n    This would be done almost always from the ``Buy`` and ``Sell`` methods of\\n    the ``Strategy`` subclass being used in ``Cerebro``\\n    \"}| {test obj.__eq__ = <bound method OrderBase.__eq__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.__format__ = <built-in method __format__ of IBOrder object at 0x7f3295f95f60>}| {test obj.__ge__ = <method-wrapper '__ge__' of IBOrder object at 0x7f3295f95f60>}| {test obj.__getattr__ = <bound method OrderBase.__getattr__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.__getattribute__ = <method-wrapper '__getattribute__' of IBOrder object at 0x7f3295f95f60>}| {test obj.__gt__ = <method-wrapper '__gt__' of IBOrder object at 0x7f3295f95f60>}| {test obj.__hash__ = None}| {test obj.__init__ = <bound method IBOrder.__init__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.__init_subclass__ = <built-in method __init_subclass__ of MetaParams object at 0x559ee2fd2398>}| {test obj.__le__ = <method-wrapper '__le__' of IBOrder object at 0x7f3295f95f60>}| {test obj.__lt__ = <method-wrapper '__lt__' of IBOrder object at 0x7f3295f95f60>}| {test obj.__module__ = 'arquants.brokers.rofxbroker'}| {test obj.__ne__ = <bound method OrderBase.__ne__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.__new__ = <built-in method __new__ of type object at 0x7f32ab4c5e40>}| {test obj.__reduce__ = <built-in method __reduce__ of IBOrder object at 0x7f3295f95f60>}| {test obj.__reduce_ex__ = <built-in method __reduce_ex__ of IBOrder object at 0x7f3295f95f60>}| {test obj.__repr__ = <method-wrapper '__repr__' of IBOrder object at 0x7f3295f95f60>}| {test obj.__setattr__ = <method-wrapper '__setattr__' of IBOrder object at 0x7f3295f95f60>}| {test obj.__setattribute__ = <bound method OrderBase.__setattribute__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.__sizeof__ = <built-in method __sizeof__ of IBOrder object at 0x7f3295f95f60>}| {test obj.__slotnames__ = []}| {test obj.__str__ = <bound method IBOrder.__str__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.__subclasshook__ = <built-in method __subclasshook__ of MetaParams object at 0x559ee2fd2398>}| {test obj.__weakref__ = None}| {test obj._active = True}| {test obj._getplimit = <bound method OrderBase._getplimit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj._limitoffset = 0.0}| {test obj._plimit = None}| {test obj._setplimit = <bound method OrderBase._setplimit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj._willexpire = False}| {test obj.abs_size = 201.0}| {test obj.accept = <bound method OrderBase.accept of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.activate = <bound method OrderBase.activate of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.active = <bound method OrderBase.active of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.addcomminfo = <bound method OrderBase.addcomminfo of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.addinfo = <bound method OrderBase.addinfo of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.alive = <bound method OrderBase.alive of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.broker = <arquants.brokers.rofxbroker.IBBroker object at 0x7f329a5d1400>}| {test obj.brokerstatus = <bound method OrderBase.brokerstatus of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.cancel = <bound method OrderBase.cancel of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.clone = <bound method OrderBase.clone of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.comminfo = <arquants.brokers.rofxbroker.IBCommInfo object at 0x7f3295f95dd8>}| {test obj.completed = <bound method OrderBase.completed of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.created = <backtrader.order.OrderData object at 0x7f3295fe0b70>}| {test obj.dteos = 737625.9999999999}| {test obj.execute = <bound method OrderBase.execute of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.executed = <backtrader.order.OrderData object at 0x7f3295f95ef0>}| {test obj.expire = <bound method OrderBase.expire of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.frompackages = ()}| {test obj.getordername = <bound method OrderBase.getordername of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.getstatusname = <bound method OrderBase.getstatusname of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.info = AutoOrderedDict()}| {test obj.isbuy = <bound method OrderBase.isbuy of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.issell = <bound method OrderBase.issell of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.m_action = 'BUY'}| {test obj.m_auxPrice = 0.0}| {test obj.m_clientId = 9598}| {test obj.m_lmtPrice = 2962.6}| {test obj.m_ocaGroup = 'eec439d0-66da-4046-8471-48a1bbb81165'}| {test obj.m_ocaType = 1}| {test obj.m_orderId = '83c4f7b64336428'}| {test obj.m_orderType = 'LMT'}| {test obj.m_permid = 0}| {test obj.m_tif = 'GTC'}| {test obj.m_totalQuantity = 201.0}| {test obj.m_transmit = True}| {test obj.margin = <bound method OrderBase.margin of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.ordtype = 0}| {test obj.ordtypename = <bound method OrderBase.ordtypename of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.p = <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f3296052828>}| {test obj.packages = ()}| {test obj.params = <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f3296052828>}| {test obj.partial = <bound method OrderBase.partial of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.plen = 1}| {test obj.plimit = None}| {test obj.position = 0}| {test obj.ref = 1}| {test obj.refbasis = count(2)}| {test obj.reject = <bound method OrderBase.reject of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.setposition = <bound method OrderBase.setposition of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.status = 1}| {test obj.submit = <bound method OrderBase.submit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.trailadjust = <bound method OrderBase.trailadjust of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f95f60>>}| {test obj.triggered = False}|"}
2020-07-18 22:21:45.377080 - {"id": 8, "strategy_id": "TASA_FZ", "execution_id": 159512890324, "type": "PR", "timestamp": 1595128903.422892, "event_id": 4, "internal_log": " {MD not Change}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 22:21:45.377945 - {"id": 9, "strategy_id": "TASA_FZ", "execution_id": 159512890324, "type": "PR", "timestamp": 1595128903.426984, "event_id": 4, "internal_log": " {MD not Change}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 22:21:45.378851 - {"id": 10, "strategy_id": "TASA_FZ", "execution_id": 159512890324, "type": "EV", "timestamp": 1595128903.500733, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY_HOLD", "event_id": 5, "event_type": "OR", "order_id": "83c4f7b64336428", "state": "Rejected", "last_px": null, "last_qty": null, "rem_size": 201.0}
2020-07-18 22:21:45.391975 - {"id": 11, "strategy_id": "TASA_FZ", "execution_id": 159512890324, "type": "PR", "timestamp": 1595128903.500837, "event_id": 5, "internal_log": " {test obj.Accepted = 2}| {test obj.Buy = 0}| {test obj.Canceled = 5}| {test obj.Cancelled = 5}| {test obj.Close = 1}| {test obj.Completed = 4}| {test obj.Created = 0}| {test obj.DAY = datetime.timedelta(0)}| {test obj.ExecType = <bound method OrderBase.ExecType of <class 'arquants.brokers.rofxbroker.IBOrder'>>}| {test obj.ExecTypes = ['Market', 'Close', 'Limit', 'Stop', 'StopLimit', 'StopTrail', 'StopTrailLimit', 'Historical']}| {test obj.Expired = 6}| {test obj.Historical = 7}| {test obj.Limit = 2}| {test obj.Margin = 7}| {test obj.Market = 0}| {test obj.MarketToLimit = range(8, 9)}| {test obj.OrdTypes = ['Buy', 'Sell']}| {test obj.Partial = 3}| {test obj.Rejected = 8}| {test obj.Sell = 1}| {test obj.Status = ['Created', 'Submitted', 'Accepted', 'Partial', 'Completed', 'Canceled', 'Expired', 'Margin', 'Rejected']}| {test obj.Stop = 3}| {test obj.StopLimit = 4}| {test obj.StopTrail = 5}| {test obj.StopTrailLimit = 6}| {test obj.Submitted = 1}| {test obj.T_Close = 0}| {test obj.T_Date = 2}| {test obj.T_Day = 1}| {test obj.T_None = 3}| {test obj.V_None = range(0, 1)}| {test obj._IBOrdTypes = {None: 'MKT', 0: 'MKT', 2: 'LMT', 1: 'MOC', 3: 'STP', 4: 'STPLMT', 5: 'TRAIL', 6: 'TRAIL LIMIT'}}| {test obj.__class__ = <class 'arquants.brokers.rofxbroker.IBOrder'>}| {test obj.__delattr__ = <method-wrapper '__delattr__' of IBOrder object at 0x7f3295f40198>}| {test obj.__dict__ = {'params': <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f3296052828>, 'p': <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f3296052828>, '_willexpire': False, 'ordtype': 0, 'ref': 1, 'broker': None, 'info': AutoOrderedDict(), 'comminfo': <arquants.brokers.rofxbroker.IBCommInfo object at 0x7f3295f95dd8>, 'triggered': False, '_active': True, 'status': 8, '_plimit': None, 'created': <backtrader.order.OrderData object at 0x7f3295fe0b70>, '_limitoffset': 0.0, 'executed': <backtrader.order.OrderData object at 0x7f3295f406a0>, 'position': 0, 'dteos': 737625.9999999999, 'm_orderType': 'LMT', 'm_permid': 0, 'm_action': 'BUY', 'm_lmtPrice': 2962.6, 'm_auxPrice': 0.0, 'm_totalQuantity': 201.0, 'abs_size': 201.0, 'm_transmit': True, 'm_tif': 'GTC', 'm_ocaType': 1, 'm_clientId': 9598, 'm_orderId': '83c4f7b64336428', 'plen': 1, 'm_ocaGroup': 'eec439d0-66da-4046-8471-48a1bbb81165'}}| {test obj.__dir__ = <built-in method __dir__ of IBOrder object at 0x7f3295f40198>}| {test obj.__doc__ = \"Subclasses the IBPy order to provide the minimum extra functionality\\n    needed to be compatible with the internally defined orders\\n\\n    Once ``OrderBase`` has processed the parameters, the __init__ method takes\\n    over to use the parameter values and set the appropriate values in the\\n    ib.ext.Order.Order object\\n\\n    Any extra parameters supplied with kwargs are applied directly to the\\n    ib.ext.Order.Order object, which could be used as follows::\\n\\n      Example: if the 4 order execution types directly supported by\\n      ``backtrader`` are not enough, in the case of for example\\n      *Interactive Brokers* the following could be passed as *kwargs*::\\n\\n        orderType='LIT', lmtPrice=10.0, auxPrice=9.8\\n\\n      This would override the settings created by ``backtrader`` and\\n      generate a ``LIMIT IF TOUCHED`` order with a *touched* price of 9.8\\n      and a *limit* price of 10.0.\\n\\n    This would be done almost always from the ``Buy`` and ``Sell`` methods of\\n    the ``Strategy`` subclass being used in ``Cerebro``\\n    \"}| {test obj.__eq__ = <bound method OrderBase.__eq__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.__format__ = <built-in method __format__ of IBOrder object at 0x7f3295f40198>}| {test obj.__ge__ = <method-wrapper '__ge__' of IBOrder object at 0x7f3295f40198>}| {test obj.__getattr__ = <bound method OrderBase.__getattr__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.__getattribute__ = <method-wrapper '__getattribute__' of IBOrder object at 0x7f3295f40198>}| {test obj.__gt__ = <method-wrapper '__gt__' of IBOrder object at 0x7f3295f40198>}| {test obj.__hash__ = None}| {test obj.__init__ = <bound method IBOrder.__init__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.__init_subclass__ = <built-in method __init_subclass__ of MetaParams object at 0x559ee2fd2398>}| {test obj.__le__ = <method-wrapper '__le__' of IBOrder object at 0x7f3295f40198>}| {test obj.__lt__ = <method-wrapper '__lt__' of IBOrder object at 0x7f3295f40198>}| {test obj.__module__ = 'arquants.brokers.rofxbroker'}| {test obj.__ne__ = <bound method OrderBase.__ne__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.__new__ = <built-in method __new__ of type object at 0x7f32ab4c5e40>}| {test obj.__reduce__ = <built-in method __reduce__ of IBOrder object at 0x7f3295f40198>}| {test obj.__reduce_ex__ = <built-in method __reduce_ex__ of IBOrder object at 0x7f3295f40198>}| {test obj.__repr__ = <method-wrapper '__repr__' of IBOrder object at 0x7f3295f40198>}| {test obj.__setattr__ = <method-wrapper '__setattr__' of IBOrder object at 0x7f3295f40198>}| {test obj.__setattribute__ = <bound method OrderBase.__setattribute__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.__sizeof__ = <built-in method __sizeof__ of IBOrder object at 0x7f3295f40198>}| {test obj.__slotnames__ = []}| {test obj.__str__ = <bound method IBOrder.__str__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.__subclasshook__ = <built-in method __subclasshook__ of MetaParams object at 0x559ee2fd2398>}| {test obj.__weakref__ = None}| {test obj._active = True}| {test obj._getplimit = <bound method OrderBase._getplimit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj._limitoffset = 0.0}| {test obj._plimit = None}| {test obj._setplimit = <bound method OrderBase._setplimit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj._willexpire = False}| {test obj.abs_size = 201.0}| {test obj.accept = <bound method OrderBase.accept of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.activate = <bound method OrderBase.activate of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.active = <bound method OrderBase.active of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.addcomminfo = <bound method OrderBase.addcomminfo of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.addinfo = <bound method OrderBase.addinfo of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.alive = <bound method OrderBase.alive of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.broker = None}| {test obj.brokerstatus = <bound method OrderBase.brokerstatus of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.cancel = <bound method OrderBase.cancel of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.clone = <bound method OrderBase.clone of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.comminfo = <arquants.brokers.rofxbroker.IBCommInfo object at 0x7f3295f95dd8>}| {test obj.completed = <bound method OrderBase.completed of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.created = <backtrader.order.OrderData object at 0x7f3295fe0b70>}| {test obj.dteos = 737625.9999999999}| {test obj.execute = <bound method OrderBase.execute of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.executed = <backtrader.order.OrderData object at 0x7f3295f406a0>}| {test obj.expire = <bound method OrderBase.expire of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.frompackages = ()}| {test obj.getordername = <bound method OrderBase.getordername of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.getstatusname = <bound method OrderBase.getstatusname of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.info = AutoOrderedDict()}| {test obj.isbuy = <bound method OrderBase.isbuy of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.issell = <bound method OrderBase.issell of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.m_action = 'BUY'}| {test obj.m_auxPrice = 0.0}| {test obj.m_clientId = 9598}| {test obj.m_lmtPrice = 2962.6}| {test obj.m_ocaGroup = 'eec439d0-66da-4046-8471-48a1bbb81165'}| {test obj.m_ocaType = 1}| {test obj.m_orderId = '83c4f7b64336428'}| {test obj.m_orderType = 'LMT'}| {test obj.m_permid = 0}| {test obj.m_tif = 'GTC'}| {test obj.m_totalQuantity = 201.0}| {test obj.m_transmit = True}| {test obj.margin = <bound method OrderBase.margin of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.ordtype = 0}| {test obj.ordtypename = <bound method OrderBase.ordtypename of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.p = <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f3296052828>}| {test obj.packages = ()}| {test obj.params = <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f3296052828>}| {test obj.partial = <bound method OrderBase.partial of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.plen = 1}| {test obj.plimit = None}| {test obj.position = 0}| {test obj.ref = 1}| {test obj.refbasis = count(2)}| {test obj.reject = <bound method OrderBase.reject of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.setposition = <bound method OrderBase.setposition of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.status = 8}| {test obj.submit = <bound method OrderBase.submit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.trailadjust = <bound method OrderBase.trailadjust of <arquants.brokers.rofxbroker.IBOrder object at 0x7f3295f40198>>}| {test obj.triggered = False}| {Strategy: 0 - PASAMOS DE ESTADO BUY_HOLD A ESTADO GENERATING_SIGNAL. En index: 0}| {Strategy: 0 - PASAMOS DE ESTADO GENERATING_SIGNAL A ESTADO BUY. En index: 0}|"}
2020-07-18 22:28:21.344792 - {"id": 1, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "EV", "timestamp": 1595129299.636501, "event_id": 1, "event_type": "INI", "ws_conn": "ws://ip:port/", "improve_rate_max_size": "100", "initial_position": "", "improve_rate_insts": "0", "min_trades_rate": "0.001", "debug": "True", "min_order_amount": "100", "max_order_amount": "200000", "stop_loss": "0.01", "timer_contingency_s": "60", "stop_hour": "18:59:50", "cant_stock": "0", "bond_tick": "0.5", "stock_tick": "0.05", "bond_commission": "0.01", "stock_commission": "0.09", "max": "20000000", "days": "2", "reversion_rate": "0", "max_rate": "2", "min_rate": "1", "self": "--error-serializing--"}
2020-07-18 22:28:21.345184 - {"id": 2, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "EV", "timestamp": 1595129299.710868, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY", "event_id": 2, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"bid_px": null, "bid_qty": null, "bid_px_2": null, "bid_qty_2": null}, "MERV - XMEV - AY24 - 48hs": {"bid_px": 3000.5, "bid_qty": 101.0}}}
2020-07-18 22:28:21.345474 - {"id": 3, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "EV", "timestamp": 1595129299.711375, "index": 0, "sub_strategy": "Restore", "sub_state": "SELL", "event_id": 3, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"offer_px": null, "offer_qty": null}, "MERV - XMEV - AY24 - 48hs": {"offer_px": null, "offer_qty": null}}}
2020-07-18 22:28:21.345744 - {"id": 4, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "RE", "timestamp": 1595129299.71416, "strategy": 0, "index": 0, "event_id": 3, "response_type": "NO", "order_id": "d23f48a39bbb494", "side": "BUY", "px": 2967.0, "qty": 201.0, "instrument": "MERV - XMEV - AY24 - CI"}
2020-07-18 22:28:21.346297 - {"id": 5, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "PR", "timestamp": 1595129299.714211, "event_id": 3, "internal_log": " {best_price: 2967.0 - min_price: 2983.5 - (bid_px_ci: [None, None] bid_px_48: 3000.5 tick: 0.5 commission: 0.01 new_price: 2967.0}| {CASE_1_1_1_1}| {min price de 48hs para calcular el size: 2984.0}| {Considerando nivel de precio: 3000.5}| {Considerando nivel de precio: 3000.0}| {Creating Signal: 201.0 at 2967.0 - BEST: True}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Strategy: 0 - PASAMOS DE ESTADO BUY A ESTADO BUY_HOLD. En index: 0}|"}
2020-07-18 22:28:21.346603 - {"id": 6, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "EV", "timestamp": 1595129299.835656, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY_HOLD", "event_id": 4, "event_type": "OR", "order_id": "d23f48a39bbb494", "state": "Submitted", "last_px": null, "last_qty": null, "rem_size": 201.0}
2020-07-18 22:28:21.559020 - {"id": 7, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "PR", "timestamp": 1595129299.83571, "event_id": 4, "internal_log": " {test obj.Accepted = 2}| {test obj.Buy = 0}| {test obj.Canceled = 5}| {test obj.Cancelled = 5}| {test obj.Close = 1}| {test obj.Completed = 4}| {test obj.Created = 0}| {test obj.DAY = datetime.timedelta(0)}| {test obj.ExecType = <bound method OrderBase.ExecType of <class 'arquants.brokers.rofxbroker.IBOrder'>>}| {test obj.ExecTypes = ['Market', 'Close', 'Limit', 'Stop', 'StopLimit', 'StopTrail', 'StopTrailLimit', 'Historical']}| {test obj.Expired = 6}| {test obj.Historical = 7}| {test obj.Limit = 2}| {test obj.Margin = 7}| {test obj.Market = 0}| {test obj.MarketToLimit = range(8, 9)}| {test obj.OrdTypes = ['Buy', 'Sell']}| {test obj.Partial = 3}| {test obj.Rejected = 8}| {test obj.Sell = 1}| {test obj.Status = ['Created', 'Submitted', 'Accepted', 'Partial', 'Completed', 'Canceled', 'Expired', 'Margin', 'Rejected']}| {test obj.Stop = 3}| {test obj.StopLimit = 4}| {test obj.StopTrail = 5}| {test obj.StopTrailLimit = 6}| {test obj.Submitted = 1}| {test obj.T_Close = 0}| {test obj.T_Date = 2}| {test obj.T_Day = 1}| {test obj.T_None = 3}| {test obj.V_None = range(0, 1)}| {test obj._IBOrdTypes = {None: 'MKT', 0: 'MKT', 2: 'LMT', 1: 'MOC', 3: 'STP', 4: 'STPLMT', 5: 'TRAIL', 6: 'TRAIL LIMIT'}}| {test obj.__class__ = <class 'arquants.brokers.rofxbroker.IBOrder'>}| {test obj.__delattr__ = <method-wrapper '__delattr__' of IBOrder object at 0x7f268e7c4ef0>}| {test obj.__dict__ = {'params': <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f269be930f0>, 'p': <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f269be930f0>, '_willexpire': False, 'ordtype': 0, 'ref': 1, 'broker': <arquants.brokers.rofxbroker.IBBroker object at 0x7f2690dfe240>, 'info': AutoOrderedDict(), 'comminfo': <arquants.brokers.rofxbroker.IBCommInfo object at 0x7f268e7c4d68>, 'triggered': False, '_active': True, 'status': 1, '_plimit': None, 'created': <backtrader.order.OrderData object at 0x7f268e7c4c50>, '_limitoffset': 0.0, 'executed': <backtrader.order.OrderData object at 0x7f268e7c4eb8>, 'position': 0, 'dteos': 737625.9999999999, 'm_orderType': 'LMT', 'm_permid': 0, 'm_action': 'BUY', 'm_lmtPrice': 2967.0, 'm_auxPrice': 0.0, 'm_totalQuantity': 201.0, 'abs_size': 201.0, 'm_transmit': True, 'm_tif': 'GTC', 'm_ocaType': 1, 'm_clientId': 42160, 'm_orderId': 'd23f48a39bbb494', 'plen': 1, 'm_ocaGroup': 'a77aa10b-0bdb-4235-91b1-3eb9b21347e1'}}| {test obj.__dir__ = <built-in method __dir__ of IBOrder object at 0x7f268e7c4ef0>}| {test obj.__doc__ = \"Subclasses the IBPy order to provide the minimum extra functionality\\n    needed to be compatible with the internally defined orders\\n\\n    Once ``OrderBase`` has processed the parameters, the __init__ method takes\\n    over to use the parameter values and set the appropriate values in the\\n    ib.ext.Order.Order object\\n\\n    Any extra parameters supplied with kwargs are applied directly to the\\n    ib.ext.Order.Order object, which could be used as follows::\\n\\n      Example: if the 4 order execution types directly supported by\\n      ``backtrader`` are not enough, in the case of for example\\n      *Interactive Brokers* the following could be passed as *kwargs*::\\n\\n        orderType='LIT', lmtPrice=10.0, auxPrice=9.8\\n\\n      This would override the settings created by ``backtrader`` and\\n      generate a ``LIMIT IF TOUCHED`` order with a *touched* price of 9.8\\n      and a *limit* price of 10.0.\\n\\n    This would be done almost always from the ``Buy`` and ``Sell`` methods of\\n    the ``Strategy`` subclass being used in ``Cerebro``\\n    \"}| {test obj.__eq__ = <bound method OrderBase.__eq__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.__format__ = <built-in method __format__ of IBOrder object at 0x7f268e7c4ef0>}| {test obj.__ge__ = <method-wrapper '__ge__' of IBOrder object at 0x7f268e7c4ef0>}| {test obj.__getattr__ = <bound method OrderBase.__getattr__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.__getattribute__ = <method-wrapper '__getattribute__' of IBOrder object at 0x7f268e7c4ef0>}| {test obj.__gt__ = <method-wrapper '__gt__' of IBOrder object at 0x7f268e7c4ef0>}| {test obj.__hash__ = None}| {test obj.__init__ = <bound method IBOrder.__init__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.__init_subclass__ = <built-in method __init_subclass__ of MetaParams object at 0x5590a7434188>}| {test obj.__le__ = <method-wrapper '__le__' of IBOrder object at 0x7f268e7c4ef0>}| {test obj.__lt__ = <method-wrapper '__lt__' of IBOrder object at 0x7f268e7c4ef0>}| {test obj.__module__ = 'arquants.brokers.rofxbroker'}| {test obj.__ne__ = <bound method OrderBase.__ne__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.__new__ = <built-in method __new__ of type object at 0x7f26a21a6e40>}| {test obj.__reduce__ = <built-in method __reduce__ of IBOrder object at 0x7f268e7c4ef0>}| {test obj.__reduce_ex__ = <built-in method __reduce_ex__ of IBOrder object at 0x7f268e7c4ef0>}| {test obj.__repr__ = <method-wrapper '__repr__' of IBOrder object at 0x7f268e7c4ef0>}| {test obj.__setattr__ = <method-wrapper '__setattr__' of IBOrder object at 0x7f268e7c4ef0>}| {test obj.__setattribute__ = <bound method OrderBase.__setattribute__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.__sizeof__ = <built-in method __sizeof__ of IBOrder object at 0x7f268e7c4ef0>}| {test obj.__slotnames__ = []}| {test obj.__str__ = <bound method IBOrder.__str__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.__subclasshook__ = <built-in method __subclasshook__ of MetaParams object at 0x5590a7434188>}| {test obj.__weakref__ = None}| {test obj._active = True}| {test obj._getplimit = <bound method OrderBase._getplimit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj._limitoffset = 0.0}| {test obj._plimit = None}| {test obj._setplimit = <bound method OrderBase._setplimit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj._willexpire = False}| {test obj.abs_size = 201.0}| {test obj.accept = <bound method OrderBase.accept of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.activate = <bound method OrderBase.activate of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.active = <bound method OrderBase.active of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.addcomminfo = <bound method OrderBase.addcomminfo of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.addinfo = <bound method OrderBase.addinfo of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.alive = <bound method OrderBase.alive of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.broker = <arquants.brokers.rofxbroker.IBBroker object at 0x7f2690dfe240>}| {test obj.brokerstatus = <bound method OrderBase.brokerstatus of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.cancel = <bound method OrderBase.cancel of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.clone = <bound method OrderBase.clone of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.comminfo = <arquants.brokers.rofxbroker.IBCommInfo object at 0x7f268e7c4d68>}| {test obj.completed = <bound method OrderBase.completed of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.created = <backtrader.order.OrderData object at 0x7f268e7c4c50>}| {test obj.dteos = 737625.9999999999}| {test obj.execute = <bound method OrderBase.execute of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.executed = <backtrader.order.OrderData object at 0x7f268e7c4eb8>}| {test obj.expire = <bound method OrderBase.expire of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.frompackages = ()}| {test obj.getordername = <bound method OrderBase.getordername of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.getstatusname = <bound method OrderBase.getstatusname of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.info = AutoOrderedDict()}| {test obj.isbuy = <bound method OrderBase.isbuy of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.issell = <bound method OrderBase.issell of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.m_action = 'BUY'}| {test obj.m_auxPrice = 0.0}| {test obj.m_clientId = 42160}| {test obj.m_lmtPrice = 2967.0}| {test obj.m_ocaGroup = 'a77aa10b-0bdb-4235-91b1-3eb9b21347e1'}| {test obj.m_ocaType = 1}| {test obj.m_orderId = 'd23f48a39bbb494'}| {test obj.m_orderType = 'LMT'}| {test obj.m_permid = 0}| {test obj.m_tif = 'GTC'}| {test obj.m_totalQuantity = 201.0}| {test obj.m_transmit = True}| {test obj.margin = <bound method OrderBase.margin of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.ordtype = 0}| {test obj.ordtypename = <bound method OrderBase.ordtypename of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.p = <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f269be930f0>}| {test obj.packages = ()}| {test obj.params = <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f269be930f0>}| {test obj.partial = <bound method OrderBase.partial of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.plen = 1}| {test obj.plimit = None}| {test obj.position = 0}| {test obj.ref = 1}| {test obj.refbasis = count(2)}| {test obj.reject = <bound method OrderBase.reject of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.setposition = <bound method OrderBase.setposition of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.status = 1}| {test obj.submit = <bound method OrderBase.submit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.trailadjust = <bound method OrderBase.trailadjust of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7c4ef0>>}| {test obj.triggered = False}|"}
2020-07-18 22:28:21.559560 - {"id": 8, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "PR", "timestamp": 1595129299.837702, "event_id": 4, "internal_log": " {MD not Change}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 22:28:21.559936 - {"id": 9, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "PR", "timestamp": 1595129299.841848, "event_id": 4, "internal_log": " {MD not Change}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 22:28:21.560332 - {"id": 10, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "EV", "timestamp": 1595129299.909932, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY_HOLD", "event_id": 5, "event_type": "OR", "order_id": "d23f48a39bbb494", "state": "Accepted", "last_px": null, "last_qty": null, "rem_size": 201.0}
2020-07-18 22:28:21.564921 - {"id": 11, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "PR", "timestamp": 1595129299.910047, "event_id": 5, "internal_log": " {test obj.Accepted = 2}| {test obj.Buy = 0}| {test obj.Canceled = 5}| {test obj.Cancelled = 5}| {test obj.Close = 1}| {test obj.Completed = 4}| {test obj.Created = 0}| {test obj.DAY = datetime.timedelta(0)}| {test obj.ExecType = <bound method OrderBase.ExecType of <class 'arquants.brokers.rofxbroker.IBOrder'>>}| {test obj.ExecTypes = ['Market', 'Close', 'Limit', 'Stop', 'StopLimit', 'StopTrail', 'StopTrailLimit', 'Historical']}| {test obj.Expired = 6}| {test obj.Historical = 7}| {test obj.Limit = 2}| {test obj.Margin = 7}| {test obj.Market = 0}| {test obj.MarketToLimit = range(8, 9)}| {test obj.OrdTypes = ['Buy', 'Sell']}| {test obj.Partial = 3}| {test obj.Rejected = 8}| {test obj.Sell = 1}| {test obj.Status = ['Created', 'Submitted', 'Accepted', 'Partial', 'Completed', 'Canceled', 'Expired', 'Margin', 'Rejected']}| {test obj.Stop = 3}| {test obj.StopLimit = 4}| {test obj.StopTrail = 5}| {test obj.StopTrailLimit = 6}| {test obj.Submitted = 1}| {test obj.T_Close = 0}| {test obj.T_Date = 2}| {test obj.T_Day = 1}| {test obj.T_None = 3}| {test obj.V_None = range(0, 1)}| {test obj._IBOrdTypes = {None: 'MKT', 0: 'MKT', 2: 'LMT', 1: 'MOC', 3: 'STP', 4: 'STPLMT', 5: 'TRAIL', 6: 'TRAIL LIMIT'}}| {test obj.__class__ = <class 'arquants.brokers.rofxbroker.IBOrder'>}| {test obj.__delattr__ = <method-wrapper '__delattr__' of IBOrder object at 0x7f268e76d128>}| {test obj.__dict__ = {'params': <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f269be930f0>, 'p': <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f269be930f0>, '_willexpire': False, 'ordtype': 0, 'ref': 1, 'broker': <arquants.brokers.rofxbroker.IBBroker object at 0x7f2690dfe240>, 'info': AutoOrderedDict(), 'comminfo': <arquants.brokers.rofxbroker.IBCommInfo object at 0x7f268e7c4d68>, 'triggered': False, '_active': True, 'status': 2, '_plimit': None, 'created': <backtrader.order.OrderData object at 0x7f268e7c4c50>, '_limitoffset': 0.0, 'executed': <backtrader.order.OrderData object at 0x7f268e76d5f8>, 'position': 0, 'dteos': 737625.9999999999, 'm_orderType': 'LMT', 'm_permid': 0, 'm_action': 'BUY', 'm_lmtPrice': 2967.0, 'm_auxPrice': 0.0, 'm_totalQuantity': 201.0, 'abs_size': 201.0, 'm_transmit': True, 'm_tif': 'GTC', 'm_ocaType': 1, 'm_clientId': 42160, 'm_orderId': 'd23f48a39bbb494', 'plen': 1, 'm_ocaGroup': 'a77aa10b-0bdb-4235-91b1-3eb9b21347e1', 'm_serverOrderId': '184840470'}}| {test obj.__dir__ = <built-in method __dir__ of IBOrder object at 0x7f268e76d128>}| {test obj.__doc__ = \"Subclasses the IBPy order to provide the minimum extra functionality\\n    needed to be compatible with the internally defined orders\\n\\n    Once ``OrderBase`` has processed the parameters, the __init__ method takes\\n    over to use the parameter values and set the appropriate values in the\\n    ib.ext.Order.Order object\\n\\n    Any extra parameters supplied with kwargs are applied directly to the\\n    ib.ext.Order.Order object, which could be used as follows::\\n\\n      Example: if the 4 order execution types directly supported by\\n      ``backtrader`` are not enough, in the case of for example\\n      *Interactive Brokers* the following could be passed as *kwargs*::\\n\\n        orderType='LIT', lmtPrice=10.0, auxPrice=9.8\\n\\n      This would override the settings created by ``backtrader`` and\\n      generate a ``LIMIT IF TOUCHED`` order with a *touched* price of 9.8\\n      and a *limit* price of 10.0.\\n\\n    This would be done almost always from the ``Buy`` and ``Sell`` methods of\\n    the ``Strategy`` subclass being used in ``Cerebro``\\n    \"}| {test obj.__eq__ = <bound method OrderBase.__eq__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.__format__ = <built-in method __format__ of IBOrder object at 0x7f268e76d128>}| {test obj.__ge__ = <method-wrapper '__ge__' of IBOrder object at 0x7f268e76d128>}| {test obj.__getattr__ = <bound method OrderBase.__getattr__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.__getattribute__ = <method-wrapper '__getattribute__' of IBOrder object at 0x7f268e76d128>}| {test obj.__gt__ = <method-wrapper '__gt__' of IBOrder object at 0x7f268e76d128>}| {test obj.__hash__ = None}| {test obj.__init__ = <bound method IBOrder.__init__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.__init_subclass__ = <built-in method __init_subclass__ of MetaParams object at 0x5590a7434188>}| {test obj.__le__ = <method-wrapper '__le__' of IBOrder object at 0x7f268e76d128>}| {test obj.__lt__ = <method-wrapper '__lt__' of IBOrder object at 0x7f268e76d128>}| {test obj.__module__ = 'arquants.brokers.rofxbroker'}| {test obj.__ne__ = <bound method OrderBase.__ne__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.__new__ = <built-in method __new__ of type object at 0x7f26a21a6e40>}| {test obj.__reduce__ = <built-in method __reduce__ of IBOrder object at 0x7f268e76d128>}| {test obj.__reduce_ex__ = <built-in method __reduce_ex__ of IBOrder object at 0x7f268e76d128>}| {test obj.__repr__ = <method-wrapper '__repr__' of IBOrder object at 0x7f268e76d128>}| {test obj.__setattr__ = <method-wrapper '__setattr__' of IBOrder object at 0x7f268e76d128>}| {test obj.__setattribute__ = <bound method OrderBase.__setattribute__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.__sizeof__ = <built-in method __sizeof__ of IBOrder object at 0x7f268e76d128>}| {test obj.__slotnames__ = []}| {test obj.__str__ = <bound method IBOrder.__str__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.__subclasshook__ = <built-in method __subclasshook__ of MetaParams object at 0x5590a7434188>}| {test obj.__weakref__ = None}| {test obj._active = True}| {test obj._getplimit = <bound method OrderBase._getplimit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj._limitoffset = 0.0}| {test obj._plimit = None}| {test obj._setplimit = <bound method OrderBase._setplimit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj._willexpire = False}| {test obj.abs_size = 201.0}| {test obj.accept = <bound method OrderBase.accept of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.activate = <bound method OrderBase.activate of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.active = <bound method OrderBase.active of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.addcomminfo = <bound method OrderBase.addcomminfo of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.addinfo = <bound method OrderBase.addinfo of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.alive = <bound method OrderBase.alive of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.broker = <arquants.brokers.rofxbroker.IBBroker object at 0x7f2690dfe240>}| {test obj.brokerstatus = <bound method OrderBase.brokerstatus of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.cancel = <bound method OrderBase.cancel of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.clone = <bound method OrderBase.clone of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.comminfo = <arquants.brokers.rofxbroker.IBCommInfo object at 0x7f268e7c4d68>}| {test obj.completed = <bound method OrderBase.completed of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.created = <backtrader.order.OrderData object at 0x7f268e7c4c50>}| {test obj.dteos = 737625.9999999999}| {test obj.execute = <bound method OrderBase.execute of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.executed = <backtrader.order.OrderData object at 0x7f268e76d5f8>}| {test obj.expire = <bound method OrderBase.expire of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.frompackages = ()}| {test obj.getordername = <bound method OrderBase.getordername of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.getstatusname = <bound method OrderBase.getstatusname of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.info = AutoOrderedDict()}| {test obj.isbuy = <bound method OrderBase.isbuy of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.issell = <bound method OrderBase.issell of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.m_action = 'BUY'}| {test obj.m_auxPrice = 0.0}| {test obj.m_clientId = 42160}| {test obj.m_lmtPrice = 2967.0}| {test obj.m_ocaGroup = 'a77aa10b-0bdb-4235-91b1-3eb9b21347e1'}| {test obj.m_ocaType = 1}| {test obj.m_orderId = 'd23f48a39bbb494'}| {test obj.m_orderType = 'LMT'}| {test obj.m_permid = 0}| {test obj.m_serverOrderId = '184840470'}| {test obj.m_tif = 'GTC'}| {test obj.m_totalQuantity = 201.0}| {test obj.m_transmit = True}| {test obj.margin = <bound method OrderBase.margin of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.ordtype = 0}| {test obj.ordtypename = <bound method OrderBase.ordtypename of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.p = <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f269be930f0>}| {test obj.packages = ()}| {test obj.params = <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f269be930f0>}| {test obj.partial = <bound method OrderBase.partial of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.plen = 1}| {test obj.plimit = None}| {test obj.position = 0}| {test obj.ref = 1}| {test obj.refbasis = count(2)}| {test obj.reject = <bound method OrderBase.reject of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.setposition = <bound method OrderBase.setposition of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.status = 2}| {test obj.submit = <bound method OrderBase.submit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.trailadjust = <bound method OrderBase.trailadjust of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e76d128>>}| {test obj.triggered = False}| {Strategy: 0 - PASAMOS DE ESTADO BUY_HOLD A ESTADO GENERATING_SIGNAL. En index: 0}| {Strategy: 0 - PASAMOS DE ESTADO GENERATING_SIGNAL A ESTADO BUY. En index: 0}|"}
2020-07-18 22:28:21.573453 - {"id": 12, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "EV", "timestamp": 1595129299.91349, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY", "event_id": 6, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"bid_px": 2967.0, "bid_qty": 201.0, "bid_px_2": null, "bid_qty_2": null}, "MERV - XMEV - AY24 - 48hs": {"bid_px": 3000.5, "bid_qty": 101.0}}}
2020-07-18 22:28:21.573834 - {"id": 13, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "PR", "timestamp": 1595129299.915186, "event_id": 6, "internal_log": " {best_price: 2967.0 - min_price: 2983.5 - (bid_px_ci: [None, None] bid_px_48: 3000.5 tick: 0.5 commission: 0.01 new_price: 2967.0}| {is our order? : True}| {llego MD de nuestra propia orden}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 22:28:36.304306 - {"id": 14, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "EV", "timestamp": 1595129315.502369, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY", "event_id": 7, "event_type": "OR", "order_id": "d23f48a39bbb494", "state": "Completed", "last_px": 2967.0, "last_qty": 201.0, "rem_size": 0.0}
2020-07-18 22:28:36.305311 - {"id": 15, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "RE", "timestamp": 1595129315.503309, "strategy": 1, "index": 0, "event_id": 7, "response_type": "NO", "order_id": "5cdab290fb3945a", "side": "SELL", "px": 2984.0, "qty": -201.0, "instrument": "MERV - XMEV - AY24 - 48hs"}
2020-07-18 22:28:36.319884 - {"id": 16, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "PR", "timestamp": 1595129315.503511, "event_id": 7, "internal_log": " {test obj.Accepted = 2}| {test obj.Buy = 0}| {test obj.Canceled = 5}| {test obj.Cancelled = 5}| {test obj.Close = 1}| {test obj.Completed = 4}| {test obj.Created = 0}| {test obj.DAY = datetime.timedelta(0)}| {test obj.ExecType = <bound method OrderBase.ExecType of <class 'arquants.brokers.rofxbroker.IBOrder'>>}| {test obj.ExecTypes = ['Market', 'Close', 'Limit', 'Stop', 'StopLimit', 'StopTrail', 'StopTrailLimit', 'Historical']}| {test obj.Expired = 6}| {test obj.Historical = 7}| {test obj.Limit = 2}| {test obj.Margin = 7}| {test obj.Market = 0}| {test obj.MarketToLimit = range(8, 9)}| {test obj.OrdTypes = ['Buy', 'Sell']}| {test obj.Partial = 3}| {test obj.Rejected = 8}| {test obj.Sell = 1}| {test obj.Status = ['Created', 'Submitted', 'Accepted', 'Partial', 'Completed', 'Canceled', 'Expired', 'Margin', 'Rejected']}| {test obj.Stop = 3}| {test obj.StopLimit = 4}| {test obj.StopTrail = 5}| {test obj.StopTrailLimit = 6}| {test obj.Submitted = 1}| {test obj.T_Close = 0}| {test obj.T_Date = 2}| {test obj.T_Day = 1}| {test obj.T_None = 3}| {test obj.V_None = range(0, 1)}| {test obj._IBOrdTypes = {None: 'MKT', 0: 'MKT', 2: 'LMT', 1: 'MOC', 3: 'STP', 4: 'STPLMT', 5: 'TRAIL', 6: 'TRAIL LIMIT'}}| {test obj.__class__ = <class 'arquants.brokers.rofxbroker.IBOrder'>}| {test obj.__delattr__ = <method-wrapper '__delattr__' of IBOrder object at 0x7f268e793438>}| {test obj.__dict__ = {'params': <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f269be930f0>, 'p': <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f269be930f0>, '_willexpire': False, 'ordtype': 0, 'ref': 1, 'broker': <arquants.brokers.rofxbroker.IBBroker object at 0x7f2690dfe240>, 'info': AutoOrderedDict(), 'comminfo': <arquants.brokers.rofxbroker.IBCommInfo object at 0x7f268e7c4d68>, 'triggered': False, '_active': True, 'status': 4, '_plimit': None, 'created': <backtrader.order.OrderData object at 0x7f268e7c4c50>, '_limitoffset': 0.0, 'executed': <backtrader.order.OrderData object at 0x7f268e793320>, 'position': 0, 'dteos': 737625.9999999999, 'm_orderType': 'LMT', 'm_permid': 0, 'm_action': 'BUY', 'm_lmtPrice': 2967.0, 'm_auxPrice': 0.0, 'm_totalQuantity': 201.0, 'abs_size': 201.0, 'm_transmit': True, 'm_tif': 'GTC', 'm_ocaType': 1, 'm_clientId': 42160, 'm_orderId': 'd23f48a39bbb494', 'plen': 1, 'm_ocaGroup': 'a77aa10b-0bdb-4235-91b1-3eb9b21347e1', 'm_serverOrderId': '184840470', 'tradeid': 'T7068399'}}| {test obj.__dir__ = <built-in method __dir__ of IBOrder object at 0x7f268e793438>}| {test obj.__doc__ = \"Subclasses the IBPy order to provide the minimum extra functionality\\n    needed to be compatible with the internally defined orders\\n\\n    Once ``OrderBase`` has processed the parameters, the __init__ method takes\\n    over to use the parameter values and set the appropriate values in the\\n    ib.ext.Order.Order object\\n\\n    Any extra parameters supplied with kwargs are applied directly to the\\n    ib.ext.Order.Order object, which could be used as follows::\\n\\n      Example: if the 4 order execution types directly supported by\\n      ``backtrader`` are not enough, in the case of for example\\n      *Interactive Brokers* the following could be passed as *kwargs*::\\n\\n        orderType='LIT', lmtPrice=10.0, auxPrice=9.8\\n\\n      This would override the settings created by ``backtrader`` and\\n      generate a ``LIMIT IF TOUCHED`` order with a *touched* price of 9.8\\n      and a *limit* price of 10.0.\\n\\n    This would be done almost always from the ``Buy`` and ``Sell`` methods of\\n    the ``Strategy`` subclass being used in ``Cerebro``\\n    \"}| {test obj.__eq__ = <bound method OrderBase.__eq__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.__format__ = <built-in method __format__ of IBOrder object at 0x7f268e793438>}| {test obj.__ge__ = <method-wrapper '__ge__' of IBOrder object at 0x7f268e793438>}| {test obj.__getattr__ = <bound method OrderBase.__getattr__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.__getattribute__ = <method-wrapper '__getattribute__' of IBOrder object at 0x7f268e793438>}| {test obj.__gt__ = <method-wrapper '__gt__' of IBOrder object at 0x7f268e793438>}| {test obj.__hash__ = None}| {test obj.__init__ = <bound method IBOrder.__init__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.__init_subclass__ = <built-in method __init_subclass__ of MetaParams object at 0x5590a7434188>}| {test obj.__le__ = <method-wrapper '__le__' of IBOrder object at 0x7f268e793438>}| {test obj.__lt__ = <method-wrapper '__lt__' of IBOrder object at 0x7f268e793438>}| {test obj.__module__ = 'arquants.brokers.rofxbroker'}| {test obj.__ne__ = <bound method OrderBase.__ne__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.__new__ = <built-in method __new__ of type object at 0x7f26a21a6e40>}| {test obj.__reduce__ = <built-in method __reduce__ of IBOrder object at 0x7f268e793438>}| {test obj.__reduce_ex__ = <built-in method __reduce_ex__ of IBOrder object at 0x7f268e793438>}| {test obj.__repr__ = <method-wrapper '__repr__' of IBOrder object at 0x7f268e793438>}| {test obj.__setattr__ = <method-wrapper '__setattr__' of IBOrder object at 0x7f268e793438>}| {test obj.__setattribute__ = <bound method OrderBase.__setattribute__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.__sizeof__ = <built-in method __sizeof__ of IBOrder object at 0x7f268e793438>}| {test obj.__slotnames__ = []}| {test obj.__str__ = <bound method IBOrder.__str__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.__subclasshook__ = <built-in method __subclasshook__ of MetaParams object at 0x5590a7434188>}| {test obj.__weakref__ = None}| {test obj._active = True}| {test obj._getplimit = <bound method OrderBase._getplimit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj._limitoffset = 0.0}| {test obj._plimit = None}| {test obj._setplimit = <bound method OrderBase._setplimit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj._willexpire = False}| {test obj.abs_size = 201.0}| {test obj.accept = <bound method OrderBase.accept of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.activate = <bound method OrderBase.activate of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.active = <bound method OrderBase.active of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.addcomminfo = <bound method OrderBase.addcomminfo of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.addinfo = <bound method OrderBase.addinfo of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.alive = <bound method OrderBase.alive of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.broker = <arquants.brokers.rofxbroker.IBBroker object at 0x7f2690dfe240>}| {test obj.brokerstatus = <bound method OrderBase.brokerstatus of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.cancel = <bound method OrderBase.cancel of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.clone = <bound method OrderBase.clone of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.comminfo = <arquants.brokers.rofxbroker.IBCommInfo object at 0x7f268e7c4d68>}| {test obj.completed = <bound method OrderBase.completed of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.created = <backtrader.order.OrderData object at 0x7f268e7c4c50>}| {test obj.dteos = 737625.9999999999}| {test obj.execute = <bound method OrderBase.execute of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.executed = <backtrader.order.OrderData object at 0x7f268e793320>}| {test obj.expire = <bound method OrderBase.expire of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.frompackages = ()}| {test obj.getordername = <bound method OrderBase.getordername of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.getstatusname = <bound method OrderBase.getstatusname of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.info = AutoOrderedDict()}| {test obj.isbuy = <bound method OrderBase.isbuy of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.issell = <bound method OrderBase.issell of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.m_action = 'BUY'}| {test obj.m_auxPrice = 0.0}| {test obj.m_clientId = 42160}| {test obj.m_lmtPrice = 2967.0}| {test obj.m_ocaGroup = 'a77aa10b-0bdb-4235-91b1-3eb9b21347e1'}| {test obj.m_ocaType = 1}| {test obj.m_orderId = 'd23f48a39bbb494'}| {test obj.m_orderType = 'LMT'}| {test obj.m_permid = 0}| {test obj.m_serverOrderId = '184840470'}| {test obj.m_tif = 'GTC'}| {test obj.m_totalQuantity = 201.0}| {test obj.m_transmit = True}| {test obj.margin = <bound method OrderBase.margin of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.ordtype = 0}| {test obj.ordtypename = <bound method OrderBase.ordtypename of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.p = <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f269be930f0>}| {test obj.packages = ()}| {test obj.params = <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f269be930f0>}| {test obj.partial = <bound method OrderBase.partial of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.plen = 1}| {test obj.plimit = None}| {test obj.position = 0}| {test obj.ref = 1}| {test obj.refbasis = count(2)}| {test obj.reject = <bound method OrderBase.reject of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.setposition = <bound method OrderBase.setposition of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.status = 4}| {test obj.submit = <bound method OrderBase.submit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.tradeid = 'T7068399'}| {test obj.trailadjust = <bound method OrderBase.trailadjust of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e793438>>}| {test obj.triggered = False}| {Se ejecutaron 201.0 en CI. Orden totalmente operada. El monto consumido es 5963.67}| {Strategy: 0 - PASAMOS DE ESTADO BUY A ESTADO SELL. En index: 0}|"}
2020-07-18 22:28:36.509209 - {"id": 17, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "EV", "timestamp": 1595129315.51327, "index": 0, "sub_strategy": "Tasa", "sub_state": "SELL", "event_id": 8, "event_type": "OR", "order_id": "5cdab290fb3945a", "state": "Submitted", "last_px": null, "last_qty": null, "rem_size": -201.0}
2020-07-18 22:28:36.523528 - {"id": 18, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "PR", "timestamp": 1595129315.513318, "event_id": 8, "internal_log": " {test obj.Accepted = 2}| {test obj.Buy = 0}| {test obj.Canceled = 5}| {test obj.Cancelled = 5}| {test obj.Close = 1}| {test obj.Completed = 4}| {test obj.Created = 0}| {test obj.DAY = datetime.timedelta(0)}| {test obj.ExecType = <bound method OrderBase.ExecType of <class 'arquants.brokers.rofxbroker.IBOrder'>>}| {test obj.ExecTypes = ['Market', 'Close', 'Limit', 'Stop', 'StopLimit', 'StopTrail', 'StopTrailLimit', 'Historical']}| {test obj.Expired = 6}| {test obj.Historical = 7}| {test obj.Limit = 2}| {test obj.Margin = 7}| {test obj.Market = 0}| {test obj.MarketToLimit = range(8, 9)}| {test obj.OrdTypes = ['Buy', 'Sell']}| {test obj.Partial = 3}| {test obj.Rejected = 8}| {test obj.Sell = 1}| {test obj.Status = ['Created', 'Submitted', 'Accepted', 'Partial', 'Completed', 'Canceled', 'Expired', 'Margin', 'Rejected']}| {test obj.Stop = 3}| {test obj.StopLimit = 4}| {test obj.StopTrail = 5}| {test obj.StopTrailLimit = 6}| {test obj.Submitted = 1}| {test obj.T_Close = 0}| {test obj.T_Date = 2}| {test obj.T_Day = 1}| {test obj.T_None = 3}| {test obj.V_None = range(0, 1)}| {test obj._IBOrdTypes = {None: 'MKT', 0: 'MKT', 2: 'LMT', 1: 'MOC', 3: 'STP', 4: 'STPLMT', 5: 'TRAIL', 6: 'TRAIL LIMIT'}}| {test obj.__class__ = <class 'arquants.brokers.rofxbroker.IBOrder'>}| {test obj.__delattr__ = <method-wrapper '__delattr__' of IBOrder object at 0x7f268e797128>}| {test obj.__dict__ = {'params': <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f268e7970b8>, 'p': <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f268e7970b8>, '_willexpire': False, 'ordtype': 1, 'ref': 2, 'broker': <arquants.brokers.rofxbroker.IBBroker object at 0x7f2690dfe240>, 'info': AutoOrderedDict(), 'comminfo': <arquants.brokers.rofxbroker.IBCommInfo object at 0x7f268e797a20>, 'triggered': False, '_active': True, 'status': 1, '_plimit': None, 'size': -201.0, 'created': <backtrader.order.OrderData object at 0x7f268e797cc0>, '_limitoffset': 0.0, 'executed': <backtrader.order.OrderData object at 0x7f268e7977f0>, 'position': 0, 'dteos': 737625.9999999999, 'm_orderType': 'LMT', 'm_permid': 0, 'm_action': 'SELL', 'm_lmtPrice': 2984.0, 'm_auxPrice': 0.0, 'm_totalQuantity': 201.0, 'abs_size': 201.0, 'm_transmit': True, 'm_tif': 'GTC', 'm_ocaType': 1, 'm_clientId': 42160, 'm_orderId': '5cdab290fb3945a', 'plen': 2, 'm_ocaGroup': '883d2b20-46b2-44cf-962a-76473d4d6840'}}| {test obj.__dir__ = <built-in method __dir__ of IBOrder object at 0x7f268e797128>}| {test obj.__doc__ = \"Subclasses the IBPy order to provide the minimum extra functionality\\n    needed to be compatible with the internally defined orders\\n\\n    Once ``OrderBase`` has processed the parameters, the __init__ method takes\\n    over to use the parameter values and set the appropriate values in the\\n    ib.ext.Order.Order object\\n\\n    Any extra parameters supplied with kwargs are applied directly to the\\n    ib.ext.Order.Order object, which could be used as follows::\\n\\n      Example: if the 4 order execution types directly supported by\\n      ``backtrader`` are not enough, in the case of for example\\n      *Interactive Brokers* the following could be passed as *kwargs*::\\n\\n        orderType='LIT', lmtPrice=10.0, auxPrice=9.8\\n\\n      This would override the settings created by ``backtrader`` and\\n      generate a ``LIMIT IF TOUCHED`` order with a *touched* price of 9.8\\n      and a *limit* price of 10.0.\\n\\n    This would be done almost always from the ``Buy`` and ``Sell`` methods of\\n    the ``Strategy`` subclass being used in ``Cerebro``\\n    \"}| {test obj.__eq__ = <bound method OrderBase.__eq__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.__format__ = <built-in method __format__ of IBOrder object at 0x7f268e797128>}| {test obj.__ge__ = <method-wrapper '__ge__' of IBOrder object at 0x7f268e797128>}| {test obj.__getattr__ = <bound method OrderBase.__getattr__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.__getattribute__ = <method-wrapper '__getattribute__' of IBOrder object at 0x7f268e797128>}| {test obj.__gt__ = <method-wrapper '__gt__' of IBOrder object at 0x7f268e797128>}| {test obj.__hash__ = None}| {test obj.__init__ = <bound method IBOrder.__init__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.__init_subclass__ = <built-in method __init_subclass__ of MetaParams object at 0x5590a7434188>}| {test obj.__le__ = <method-wrapper '__le__' of IBOrder object at 0x7f268e797128>}| {test obj.__lt__ = <method-wrapper '__lt__' of IBOrder object at 0x7f268e797128>}| {test obj.__module__ = 'arquants.brokers.rofxbroker'}| {test obj.__ne__ = <bound method OrderBase.__ne__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.__new__ = <built-in method __new__ of type object at 0x7f26a21a6e40>}| {test obj.__reduce__ = <built-in method __reduce__ of IBOrder object at 0x7f268e797128>}| {test obj.__reduce_ex__ = <built-in method __reduce_ex__ of IBOrder object at 0x7f268e797128>}| {test obj.__repr__ = <method-wrapper '__repr__' of IBOrder object at 0x7f268e797128>}| {test obj.__setattr__ = <method-wrapper '__setattr__' of IBOrder object at 0x7f268e797128>}| {test obj.__setattribute__ = <bound method OrderBase.__setattribute__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.__sizeof__ = <built-in method __sizeof__ of IBOrder object at 0x7f268e797128>}| {test obj.__slotnames__ = []}| {test obj.__str__ = <bound method IBOrder.__str__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.__subclasshook__ = <built-in method __subclasshook__ of MetaParams object at 0x5590a7434188>}| {test obj.__weakref__ = None}| {test obj._active = True}| {test obj._getplimit = <bound method OrderBase._getplimit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj._limitoffset = 0.0}| {test obj._plimit = None}| {test obj._setplimit = <bound method OrderBase._setplimit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj._willexpire = False}| {test obj.abs_size = 201.0}| {test obj.accept = <bound method OrderBase.accept of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.activate = <bound method OrderBase.activate of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.active = <bound method OrderBase.active of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.addcomminfo = <bound method OrderBase.addcomminfo of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.addinfo = <bound method OrderBase.addinfo of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.alive = <bound method OrderBase.alive of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.broker = <arquants.brokers.rofxbroker.IBBroker object at 0x7f2690dfe240>}| {test obj.brokerstatus = <bound method OrderBase.brokerstatus of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.cancel = <bound method OrderBase.cancel of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.clone = <bound method OrderBase.clone of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.comminfo = <arquants.brokers.rofxbroker.IBCommInfo object at 0x7f268e797a20>}| {test obj.completed = <bound method OrderBase.completed of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.created = <backtrader.order.OrderData object at 0x7f268e797cc0>}| {test obj.dteos = 737625.9999999999}| {test obj.execute = <bound method OrderBase.execute of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.executed = <backtrader.order.OrderData object at 0x7f268e7977f0>}| {test obj.expire = <bound method OrderBase.expire of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.frompackages = ()}| {test obj.getordername = <bound method OrderBase.getordername of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.getstatusname = <bound method OrderBase.getstatusname of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.info = AutoOrderedDict()}| {test obj.isbuy = <bound method OrderBase.isbuy of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.issell = <bound method OrderBase.issell of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.m_action = 'SELL'}| {test obj.m_auxPrice = 0.0}| {test obj.m_clientId = 42160}| {test obj.m_lmtPrice = 2984.0}| {test obj.m_ocaGroup = '883d2b20-46b2-44cf-962a-76473d4d6840'}| {test obj.m_ocaType = 1}| {test obj.m_orderId = '5cdab290fb3945a'}| {test obj.m_orderType = 'LMT'}| {test obj.m_permid = 0}| {test obj.m_tif = 'GTC'}| {test obj.m_totalQuantity = 201.0}| {test obj.m_transmit = True}| {test obj.margin = <bound method OrderBase.margin of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.ordtype = 1}| {test obj.ordtypename = <bound method OrderBase.ordtypename of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.p = <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f268e7970b8>}| {test obj.packages = ()}| {test obj.params = <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f268e7970b8>}| {test obj.partial = <bound method OrderBase.partial of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.plen = 2}| {test obj.plimit = None}| {test obj.position = 0}| {test obj.ref = 2}| {test obj.refbasis = count(3)}| {test obj.reject = <bound method OrderBase.reject of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.setposition = <bound method OrderBase.setposition of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.size = -201.0}| {test obj.status = 1}| {test obj.submit = <bound method OrderBase.submit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.trailadjust = <bound method OrderBase.trailadjust of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e797128>>}| {test obj.triggered = False}|"}
2020-07-18 22:28:36.524305 - {"id": 19, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "PR", "timestamp": 1595129315.515383, "event_id": 8, "internal_log": " {MD not Change}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
2020-07-18 22:28:36.524840 - {"id": 20, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "EV", "timestamp": 1595129315.690599, "index": 0, "sub_strategy": "Tasa", "sub_state": "SELL", "event_id": 9, "event_type": "OR", "order_id": "5cdab290fb3945a", "state": "Partial", "last_px": 3000.5, "last_qty": -1.0, "rem_size": -200.0}
2020-07-18 22:28:36.525247 - {"id": 21, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "RE", "timestamp": 1595129315.691147, "strategy": 0, "index": 0, "event_id": 9, "response_type": "CO", "order_id": "5cdab290fb3945a"}
2020-07-18 22:28:36.532128 - {"id": 22, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "PR", "timestamp": 1595129315.691195, "event_id": 9, "internal_log": " {test obj.Accepted = 2}| {test obj.Buy = 0}| {test obj.Canceled = 5}| {test obj.Cancelled = 5}| {test obj.Close = 1}| {test obj.Completed = 4}| {test obj.Created = 0}| {test obj.DAY = datetime.timedelta(0)}| {test obj.ExecType = <bound method OrderBase.ExecType of <class 'arquants.brokers.rofxbroker.IBOrder'>>}| {test obj.ExecTypes = ['Market', 'Close', 'Limit', 'Stop', 'StopLimit', 'StopTrail', 'StopTrailLimit', 'Historical']}| {test obj.Expired = 6}| {test obj.Historical = 7}| {test obj.Limit = 2}| {test obj.Margin = 7}| {test obj.Market = 0}| {test obj.MarketToLimit = range(8, 9)}| {test obj.OrdTypes = ['Buy', 'Sell']}| {test obj.Partial = 3}| {test obj.Rejected = 8}| {test obj.Sell = 1}| {test obj.Status = ['Created', 'Submitted', 'Accepted', 'Partial', 'Completed', 'Canceled', 'Expired', 'Margin', 'Rejected']}| {test obj.Stop = 3}| {test obj.StopLimit = 4}| {test obj.StopTrail = 5}| {test obj.StopTrailLimit = 6}| {test obj.Submitted = 1}| {test obj.T_Close = 0}| {test obj.T_Date = 2}| {test obj.T_Day = 1}| {test obj.T_None = 3}| {test obj.V_None = range(0, 1)}| {test obj._IBOrdTypes = {None: 'MKT', 0: 'MKT', 2: 'LMT', 1: 'MOC', 3: 'STP', 4: 'STPLMT', 5: 'TRAIL', 6: 'TRAIL LIMIT'}}| {test obj.__class__ = <class 'arquants.brokers.rofxbroker.IBOrder'>}| {test obj.__delattr__ = <method-wrapper '__delattr__' of IBOrder object at 0x7f268e7936d8>}| {test obj.__dict__ = {'params': <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f268e7970b8>, 'p': <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f268e7970b8>, '_willexpire': False, 'ordtype': 1, 'ref': 2, 'broker': <arquants.brokers.rofxbroker.IBBroker object at 0x7f2690dfe240>, 'info': AutoOrderedDict(), 'comminfo': <arquants.brokers.rofxbroker.IBCommInfo object at 0x7f268e797a20>, 'triggered': False, '_active': True, 'status': 3, '_plimit': None, 'size': -201.0, 'created': <backtrader.order.OrderData object at 0x7f268e797cc0>, '_limitoffset': 0.0, 'executed': <backtrader.order.OrderData object at 0x7f268e7939e8>, 'position': 0, 'dteos': 737625.9999999999, 'm_orderType': 'LMT', 'm_permid': 0, 'm_action': 'SELL', 'm_lmtPrice': 2984.0, 'm_auxPrice': 0.0, 'm_totalQuantity': 201.0, 'abs_size': 201.0, 'm_transmit': True, 'm_tif': 'GTC', 'm_ocaType': 1, 'm_clientId': 42160, 'm_orderId': '5cdab290fb3945a', 'plen': 2, 'm_ocaGroup': '883d2b20-46b2-44cf-962a-76473d4d6840', 'm_serverOrderId': '184840472', 'tradeid': 'T7068400'}}| {test obj.__dir__ = <built-in method __dir__ of IBOrder object at 0x7f268e7936d8>}| {test obj.__doc__ = \"Subclasses the IBPy order to provide the minimum extra functionality\\n    needed to be compatible with the internally defined orders\\n\\n    Once ``OrderBase`` has processed the parameters, the __init__ method takes\\n    over to use the parameter values and set the appropriate values in the\\n    ib.ext.Order.Order object\\n\\n    Any extra parameters supplied with kwargs are applied directly to the\\n    ib.ext.Order.Order object, which could be used as follows::\\n\\n      Example: if the 4 order execution types directly supported by\\n      ``backtrader`` are not enough, in the case of for example\\n      *Interactive Brokers* the following could be passed as *kwargs*::\\n\\n        orderType='LIT', lmtPrice=10.0, auxPrice=9.8\\n\\n      This would override the settings created by ``backtrader`` and\\n      generate a ``LIMIT IF TOUCHED`` order with a *touched* price of 9.8\\n      and a *limit* price of 10.0.\\n\\n    This would be done almost always from the ``Buy`` and ``Sell`` methods of\\n    the ``Strategy`` subclass being used in ``Cerebro``\\n    \"}| {test obj.__eq__ = <bound method OrderBase.__eq__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.__format__ = <built-in method __format__ of IBOrder object at 0x7f268e7936d8>}| {test obj.__ge__ = <method-wrapper '__ge__' of IBOrder object at 0x7f268e7936d8>}| {test obj.__getattr__ = <bound method OrderBase.__getattr__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.__getattribute__ = <method-wrapper '__getattribute__' of IBOrder object at 0x7f268e7936d8>}| {test obj.__gt__ = <method-wrapper '__gt__' of IBOrder object at 0x7f268e7936d8>}| {test obj.__hash__ = None}| {test obj.__init__ = <bound method IBOrder.__init__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.__init_subclass__ = <built-in method __init_subclass__ of MetaParams object at 0x5590a7434188>}| {test obj.__le__ = <method-wrapper '__le__' of IBOrder object at 0x7f268e7936d8>}| {test obj.__lt__ = <method-wrapper '__lt__' of IBOrder object at 0x7f268e7936d8>}| {test obj.__module__ = 'arquants.brokers.rofxbroker'}| {test obj.__ne__ = <bound method OrderBase.__ne__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.__new__ = <built-in method __new__ of type object at 0x7f26a21a6e40>}| {test obj.__reduce__ = <built-in method __reduce__ of IBOrder object at 0x7f268e7936d8>}| {test obj.__reduce_ex__ = <built-in method __reduce_ex__ of IBOrder object at 0x7f268e7936d8>}| {test obj.__repr__ = <method-wrapper '__repr__' of IBOrder object at 0x7f268e7936d8>}| {test obj.__setattr__ = <method-wrapper '__setattr__' of IBOrder object at 0x7f268e7936d8>}| {test obj.__setattribute__ = <bound method OrderBase.__setattribute__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.__sizeof__ = <built-in method __sizeof__ of IBOrder object at 0x7f268e7936d8>}| {test obj.__slotnames__ = []}| {test obj.__str__ = <bound method IBOrder.__str__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.__subclasshook__ = <built-in method __subclasshook__ of MetaParams object at 0x5590a7434188>}| {test obj.__weakref__ = None}| {test obj._active = True}| {test obj._getplimit = <bound method OrderBase._getplimit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj._limitoffset = 0.0}| {test obj._plimit = None}| {test obj._setplimit = <bound method OrderBase._setplimit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj._willexpire = False}| {test obj.abs_size = 201.0}| {test obj.accept = <bound method OrderBase.accept of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.activate = <bound method OrderBase.activate of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.active = <bound method OrderBase.active of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.addcomminfo = <bound method OrderBase.addcomminfo of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.addinfo = <bound method OrderBase.addinfo of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.alive = <bound method OrderBase.alive of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.broker = <arquants.brokers.rofxbroker.IBBroker object at 0x7f2690dfe240>}| {test obj.brokerstatus = <bound method OrderBase.brokerstatus of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.cancel = <bound method OrderBase.cancel of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.clone = <bound method OrderBase.clone of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.comminfo = <arquants.brokers.rofxbroker.IBCommInfo object at 0x7f268e797a20>}| {test obj.completed = <bound method OrderBase.completed of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.created = <backtrader.order.OrderData object at 0x7f268e797cc0>}| {test obj.dteos = 737625.9999999999}| {test obj.execute = <bound method OrderBase.execute of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.executed = <backtrader.order.OrderData object at 0x7f268e7939e8>}| {test obj.expire = <bound method OrderBase.expire of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.frompackages = ()}| {test obj.getordername = <bound method OrderBase.getordername of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.getstatusname = <bound method OrderBase.getstatusname of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.info = AutoOrderedDict()}| {test obj.isbuy = <bound method OrderBase.isbuy of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.issell = <bound method OrderBase.issell of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.m_action = 'SELL'}| {test obj.m_auxPrice = 0.0}| {test obj.m_clientId = 42160}| {test obj.m_lmtPrice = 2984.0}| {test obj.m_ocaGroup = '883d2b20-46b2-44cf-962a-76473d4d6840'}| {test obj.m_ocaType = 1}| {test obj.m_orderId = '5cdab290fb3945a'}| {test obj.m_orderType = 'LMT'}| {test obj.m_permid = 0}| {test obj.m_serverOrderId = '184840472'}| {test obj.m_tif = 'GTC'}| {test obj.m_totalQuantity = 201.0}| {test obj.m_transmit = True}| {test obj.margin = <bound method OrderBase.margin of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.ordtype = 1}| {test obj.ordtypename = <bound method OrderBase.ordtypename of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.p = <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f268e7970b8>}| {test obj.packages = ()}| {test obj.params = <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f268e7970b8>}| {test obj.partial = <bound method OrderBase.partial of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.plen = 2}| {test obj.plimit = None}| {test obj.position = 0}| {test obj.ref = 2}| {test obj.refbasis = count(3)}| {test obj.reject = <bound method OrderBase.reject of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.setposition = <bound method OrderBase.setposition of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.size = -201.0}| {test obj.status = 3}| {test obj.submit = <bound method OrderBase.submit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.tradeid = 'T7068400'}| {test obj.trailadjust = <bound method OrderBase.trailadjust of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e7936d8>>}| {test obj.triggered = False}| {Strategy: 0 - PASAMOS DE ESTADO SELL A ESTADO PRE_EXIT_1. En index: 0}| {1- Iniciamos Contingencia}|"}
2020-07-18 22:28:36.532702 - {"id": 23, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "EV", "timestamp": 1595129315.694089, "index": 0, "sub_strategy": "Tasa", "sub_state": "PRE_EXIT_1", "event_id": 10, "event_type": "OR", "order_id": "5cdab290fb3945a", "state": "Partial", "last_px": 3000.5, "last_qty": -100.0, "rem_size": -100.0}
2020-07-18 22:28:36.720217 - {"id": 24, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "PR", "timestamp": 1595129315.694153, "event_id": 10, "internal_log": " {test obj.Accepted = 2}| {test obj.Buy = 0}| {test obj.Canceled = 5}| {test obj.Cancelled = 5}| {test obj.Close = 1}| {test obj.Completed = 4}| {test obj.Created = 0}| {test obj.DAY = datetime.timedelta(0)}| {test obj.ExecType = <bound method OrderBase.ExecType of <class 'arquants.brokers.rofxbroker.IBOrder'>>}| {test obj.ExecTypes = ['Market', 'Close', 'Limit', 'Stop', 'StopLimit', 'StopTrail', 'StopTrailLimit', 'Historical']}| {test obj.Expired = 6}| {test obj.Historical = 7}| {test obj.Limit = 2}| {test obj.Margin = 7}| {test obj.Market = 0}| {test obj.MarketToLimit = range(8, 9)}| {test obj.OrdTypes = ['Buy', 'Sell']}| {test obj.Partial = 3}| {test obj.Rejected = 8}| {test obj.Sell = 1}| {test obj.Status = ['Created', 'Submitted', 'Accepted', 'Partial', 'Completed', 'Canceled', 'Expired', 'Margin', 'Rejected']}| {test obj.Stop = 3}| {test obj.StopLimit = 4}| {test obj.StopTrail = 5}| {test obj.StopTrailLimit = 6}| {test obj.Submitted = 1}| {test obj.T_Close = 0}| {test obj.T_Date = 2}| {test obj.T_Day = 1}| {test obj.T_None = 3}| {test obj.V_None = range(0, 1)}| {test obj._IBOrdTypes = {None: 'MKT', 0: 'MKT', 2: 'LMT', 1: 'MOC', 3: 'STP', 4: 'STPLMT', 5: 'TRAIL', 6: 'TRAIL LIMIT'}}| {test obj.__class__ = <class 'arquants.brokers.rofxbroker.IBOrder'>}| {test obj.__delattr__ = <method-wrapper '__delattr__' of IBOrder object at 0x7f268e79f940>}| {test obj.__dict__ = {'params': <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f268e7970b8>, 'p': <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f268e7970b8>, '_willexpire': False, 'ordtype': 1, 'ref': 2, 'broker': <arquants.brokers.rofxbroker.IBBroker object at 0x7f2690dfe240>, 'info': AutoOrderedDict(), 'comminfo': <arquants.brokers.rofxbroker.IBCommInfo object at 0x7f268e797a20>, 'triggered': False, '_active': True, 'status': 3, '_plimit': None, 'size': -201.0, 'created': <backtrader.order.OrderData object at 0x7f268e797cc0>, '_limitoffset': 0.0, 'executed': <backtrader.order.OrderData object at 0x7f268e79f630>, 'position': 0, 'dteos': 737625.9999999999, 'm_orderType': 'LMT', 'm_permid': 0, 'm_action': 'SELL', 'm_lmtPrice': 2984.0, 'm_auxPrice': 0.0, 'm_totalQuantity': 201.0, 'abs_size': 201.0, 'm_transmit': True, 'm_tif': 'GTC', 'm_ocaType': 1, 'm_clientId': 42160, 'm_orderId': '5cdab290fb3945a', 'plen': 2, 'm_ocaGroup': '883d2b20-46b2-44cf-962a-76473d4d6840', 'm_serverOrderId': '184840472', 'tradeid': 'T7068401'}}| {test obj.__dir__ = <built-in method __dir__ of IBOrder object at 0x7f268e79f940>}| {test obj.__doc__ = \"Subclasses the IBPy order to provide the minimum extra functionality\\n    needed to be compatible with the internally defined orders\\n\\n    Once ``OrderBase`` has processed the parameters, the __init__ method takes\\n    over to use the parameter values and set the appropriate values in the\\n    ib.ext.Order.Order object\\n\\n    Any extra parameters supplied with kwargs are applied directly to the\\n    ib.ext.Order.Order object, which could be used as follows::\\n\\n      Example: if the 4 order execution types directly supported by\\n      ``backtrader`` are not enough, in the case of for example\\n      *Interactive Brokers* the following could be passed as *kwargs*::\\n\\n        orderType='LIT', lmtPrice=10.0, auxPrice=9.8\\n\\n      This would override the settings created by ``backtrader`` and\\n      generate a ``LIMIT IF TOUCHED`` order with a *touched* price of 9.8\\n      and a *limit* price of 10.0.\\n\\n    This would be done almost always from the ``Buy`` and ``Sell`` methods of\\n    the ``Strategy`` subclass being used in ``Cerebro``\\n    \"}| {test obj.__eq__ = <bound method OrderBase.__eq__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.__format__ = <built-in method __format__ of IBOrder object at 0x7f268e79f940>}| {test obj.__ge__ = <method-wrapper '__ge__' of IBOrder object at 0x7f268e79f940>}| {test obj.__getattr__ = <bound method OrderBase.__getattr__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.__getattribute__ = <method-wrapper '__getattribute__' of IBOrder object at 0x7f268e79f940>}| {test obj.__gt__ = <method-wrapper '__gt__' of IBOrder object at 0x7f268e79f940>}| {test obj.__hash__ = None}| {test obj.__init__ = <bound method IBOrder.__init__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.__init_subclass__ = <built-in method __init_subclass__ of MetaParams object at 0x5590a7434188>}| {test obj.__le__ = <method-wrapper '__le__' of IBOrder object at 0x7f268e79f940>}| {test obj.__lt__ = <method-wrapper '__lt__' of IBOrder object at 0x7f268e79f940>}| {test obj.__module__ = 'arquants.brokers.rofxbroker'}| {test obj.__ne__ = <bound method OrderBase.__ne__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.__new__ = <built-in method __new__ of type object at 0x7f26a21a6e40>}| {test obj.__reduce__ = <built-in method __reduce__ of IBOrder object at 0x7f268e79f940>}| {test obj.__reduce_ex__ = <built-in method __reduce_ex__ of IBOrder object at 0x7f268e79f940>}| {test obj.__repr__ = <method-wrapper '__repr__' of IBOrder object at 0x7f268e79f940>}| {test obj.__setattr__ = <method-wrapper '__setattr__' of IBOrder object at 0x7f268e79f940>}| {test obj.__setattribute__ = <bound method OrderBase.__setattribute__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.__sizeof__ = <built-in method __sizeof__ of IBOrder object at 0x7f268e79f940>}| {test obj.__slotnames__ = []}| {test obj.__str__ = <bound method IBOrder.__str__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.__subclasshook__ = <built-in method __subclasshook__ of MetaParams object at 0x5590a7434188>}| {test obj.__weakref__ = None}| {test obj._active = True}| {test obj._getplimit = <bound method OrderBase._getplimit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj._limitoffset = 0.0}| {test obj._plimit = None}| {test obj._setplimit = <bound method OrderBase._setplimit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj._willexpire = False}| {test obj.abs_size = 201.0}| {test obj.accept = <bound method OrderBase.accept of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.activate = <bound method OrderBase.activate of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.active = <bound method OrderBase.active of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.addcomminfo = <bound method OrderBase.addcomminfo of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.addinfo = <bound method OrderBase.addinfo of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.alive = <bound method OrderBase.alive of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.broker = <arquants.brokers.rofxbroker.IBBroker object at 0x7f2690dfe240>}| {test obj.brokerstatus = <bound method OrderBase.brokerstatus of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.cancel = <bound method OrderBase.cancel of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.clone = <bound method OrderBase.clone of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.comminfo = <arquants.brokers.rofxbroker.IBCommInfo object at 0x7f268e797a20>}| {test obj.completed = <bound method OrderBase.completed of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.created = <backtrader.order.OrderData object at 0x7f268e797cc0>}| {test obj.dteos = 737625.9999999999}| {test obj.execute = <bound method OrderBase.execute of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.executed = <backtrader.order.OrderData object at 0x7f268e79f630>}| {test obj.expire = <bound method OrderBase.expire of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.frompackages = ()}| {test obj.getordername = <bound method OrderBase.getordername of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.getstatusname = <bound method OrderBase.getstatusname of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.info = AutoOrderedDict()}| {test obj.isbuy = <bound method OrderBase.isbuy of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.issell = <bound method OrderBase.issell of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.m_action = 'SELL'}| {test obj.m_auxPrice = 0.0}| {test obj.m_clientId = 42160}| {test obj.m_lmtPrice = 2984.0}| {test obj.m_ocaGroup = '883d2b20-46b2-44cf-962a-76473d4d6840'}| {test obj.m_ocaType = 1}| {test obj.m_orderId = '5cdab290fb3945a'}| {test obj.m_orderType = 'LMT'}| {test obj.m_permid = 0}| {test obj.m_serverOrderId = '184840472'}| {test obj.m_tif = 'GTC'}| {test obj.m_totalQuantity = 201.0}| {test obj.m_transmit = True}| {test obj.margin = <bound method OrderBase.margin of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.ordtype = 1}| {test obj.ordtypename = <bound method OrderBase.ordtypename of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.p = <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f268e7970b8>}| {test obj.packages = ()}| {test obj.params = <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f268e7970b8>}| {test obj.partial = <bound method OrderBase.partial of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.plen = 2}| {test obj.plimit = None}| {test obj.position = 0}| {test obj.ref = 2}| {test obj.refbasis = count(3)}| {test obj.reject = <bound method OrderBase.reject of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.setposition = <bound method OrderBase.setposition of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.size = -201.0}| {test obj.status = 3}| {test obj.submit = <bound method OrderBase.submit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.tradeid = 'T7068401'}| {test obj.trailadjust = <bound method OrderBase.trailadjust of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f940>>}| {test obj.triggered = False}| {Todavia hay ordenes pendientes de cancelacion. Seguimos esperando.}|"}
2020-07-18 22:28:36.721489 - {"id": 25, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "EV", "timestamp": 1595129315.696739, "index": 0, "sub_strategy": "Tasa", "sub_state": "PRE_EXIT_1", "event_id": 11, "event_type": "OR", "order_id": "5cdab290fb3945a", "state": "Completed", "last_px": 3000.0, "last_qty": -100.0, "rem_size": 0.0}
2020-07-18 22:28:36.735610 - {"id": 26, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "PR", "timestamp": 1595129315.696836, "event_id": 11, "internal_log": " {test obj.Accepted = 2}| {test obj.Buy = 0}| {test obj.Canceled = 5}| {test obj.Cancelled = 5}| {test obj.Close = 1}| {test obj.Completed = 4}| {test obj.Created = 0}| {test obj.DAY = datetime.timedelta(0)}| {test obj.ExecType = <bound method OrderBase.ExecType of <class 'arquants.brokers.rofxbroker.IBOrder'>>}| {test obj.ExecTypes = ['Market', 'Close', 'Limit', 'Stop', 'StopLimit', 'StopTrail', 'StopTrailLimit', 'Historical']}| {test obj.Expired = 6}| {test obj.Historical = 7}| {test obj.Limit = 2}| {test obj.Margin = 7}| {test obj.Market = 0}| {test obj.MarketToLimit = range(8, 9)}| {test obj.OrdTypes = ['Buy', 'Sell']}| {test obj.Partial = 3}| {test obj.Rejected = 8}| {test obj.Sell = 1}| {test obj.Status = ['Created', 'Submitted', 'Accepted', 'Partial', 'Completed', 'Canceled', 'Expired', 'Margin', 'Rejected']}| {test obj.Stop = 3}| {test obj.StopLimit = 4}| {test obj.StopTrail = 5}| {test obj.StopTrailLimit = 6}| {test obj.Submitted = 1}| {test obj.T_Close = 0}| {test obj.T_Date = 2}| {test obj.T_Day = 1}| {test obj.T_None = 3}| {test obj.V_None = range(0, 1)}| {test obj._IBOrdTypes = {None: 'MKT', 0: 'MKT', 2: 'LMT', 1: 'MOC', 3: 'STP', 4: 'STPLMT', 5: 'TRAIL', 6: 'TRAIL LIMIT'}}| {test obj.__class__ = <class 'arquants.brokers.rofxbroker.IBOrder'>}| {test obj.__delattr__ = <method-wrapper '__delattr__' of IBOrder object at 0x7f268e79f748>}| {test obj.__dict__ = {'params': <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f268e7970b8>, 'p': <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f268e7970b8>, '_willexpire': False, 'ordtype': 1, 'ref': 2, 'broker': <arquants.brokers.rofxbroker.IBBroker object at 0x7f2690dfe240>, 'info': AutoOrderedDict(), 'comminfo': <arquants.brokers.rofxbroker.IBCommInfo object at 0x7f268e797a20>, 'triggered': False, '_active': True, 'status': 4, '_plimit': None, 'size': -201.0, 'created': <backtrader.order.OrderData object at 0x7f268e797cc0>, '_limitoffset': 0.0, 'executed': <backtrader.order.OrderData object at 0x7f268e79f780>, 'position': 0, 'dteos': 737625.9999999999, 'm_orderType': 'LMT', 'm_permid': 0, 'm_action': 'SELL', 'm_lmtPrice': 2984.0, 'm_auxPrice': 0.0, 'm_totalQuantity': 201.0, 'abs_size': 201.0, 'm_transmit': True, 'm_tif': 'GTC', 'm_ocaType': 1, 'm_clientId': 42160, 'm_orderId': '5cdab290fb3945a', 'plen': 2, 'm_ocaGroup': '883d2b20-46b2-44cf-962a-76473d4d6840', 'm_serverOrderId': '184840472', 'tradeid': 'T7068402'}}| {test obj.__dir__ = <built-in method __dir__ of IBOrder object at 0x7f268e79f748>}| {test obj.__doc__ = \"Subclasses the IBPy order to provide the minimum extra functionality\\n    needed to be compatible with the internally defined orders\\n\\n    Once ``OrderBase`` has processed the parameters, the __init__ method takes\\n    over to use the parameter values and set the appropriate values in the\\n    ib.ext.Order.Order object\\n\\n    Any extra parameters supplied with kwargs are applied directly to the\\n    ib.ext.Order.Order object, which could be used as follows::\\n\\n      Example: if the 4 order execution types directly supported by\\n      ``backtrader`` are not enough, in the case of for example\\n      *Interactive Brokers* the following could be passed as *kwargs*::\\n\\n        orderType='LIT', lmtPrice=10.0, auxPrice=9.8\\n\\n      This would override the settings created by ``backtrader`` and\\n      generate a ``LIMIT IF TOUCHED`` order with a *touched* price of 9.8\\n      and a *limit* price of 10.0.\\n\\n    This would be done almost always from the ``Buy`` and ``Sell`` methods of\\n    the ``Strategy`` subclass being used in ``Cerebro``\\n    \"}| {test obj.__eq__ = <bound method OrderBase.__eq__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.__format__ = <built-in method __format__ of IBOrder object at 0x7f268e79f748>}| {test obj.__ge__ = <method-wrapper '__ge__' of IBOrder object at 0x7f268e79f748>}| {test obj.__getattr__ = <bound method OrderBase.__getattr__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.__getattribute__ = <method-wrapper '__getattribute__' of IBOrder object at 0x7f268e79f748>}| {test obj.__gt__ = <method-wrapper '__gt__' of IBOrder object at 0x7f268e79f748>}| {test obj.__hash__ = None}| {test obj.__init__ = <bound method IBOrder.__init__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.__init_subclass__ = <built-in method __init_subclass__ of MetaParams object at 0x5590a7434188>}| {test obj.__le__ = <method-wrapper '__le__' of IBOrder object at 0x7f268e79f748>}| {test obj.__lt__ = <method-wrapper '__lt__' of IBOrder object at 0x7f268e79f748>}| {test obj.__module__ = 'arquants.brokers.rofxbroker'}| {test obj.__ne__ = <bound method OrderBase.__ne__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.__new__ = <built-in method __new__ of type object at 0x7f26a21a6e40>}| {test obj.__reduce__ = <built-in method __reduce__ of IBOrder object at 0x7f268e79f748>}| {test obj.__reduce_ex__ = <built-in method __reduce_ex__ of IBOrder object at 0x7f268e79f748>}| {test obj.__repr__ = <method-wrapper '__repr__' of IBOrder object at 0x7f268e79f748>}| {test obj.__setattr__ = <method-wrapper '__setattr__' of IBOrder object at 0x7f268e79f748>}| {test obj.__setattribute__ = <bound method OrderBase.__setattribute__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.__sizeof__ = <built-in method __sizeof__ of IBOrder object at 0x7f268e79f748>}| {test obj.__slotnames__ = []}| {test obj.__str__ = <bound method IBOrder.__str__ of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.__subclasshook__ = <built-in method __subclasshook__ of MetaParams object at 0x5590a7434188>}| {test obj.__weakref__ = None}| {test obj._active = True}| {test obj._getplimit = <bound method OrderBase._getplimit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj._limitoffset = 0.0}| {test obj._plimit = None}| {test obj._setplimit = <bound method OrderBase._setplimit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj._willexpire = False}| {test obj.abs_size = 201.0}| {test obj.accept = <bound method OrderBase.accept of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.activate = <bound method OrderBase.activate of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.active = <bound method OrderBase.active of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.addcomminfo = <bound method OrderBase.addcomminfo of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.addinfo = <bound method OrderBase.addinfo of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.alive = <bound method OrderBase.alive of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.broker = <arquants.brokers.rofxbroker.IBBroker object at 0x7f2690dfe240>}| {test obj.brokerstatus = <bound method OrderBase.brokerstatus of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.cancel = <bound method OrderBase.cancel of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.clone = <bound method OrderBase.clone of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.comminfo = <arquants.brokers.rofxbroker.IBCommInfo object at 0x7f268e797a20>}| {test obj.completed = <bound method OrderBase.completed of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.created = <backtrader.order.OrderData object at 0x7f268e797cc0>}| {test obj.dteos = 737625.9999999999}| {test obj.execute = <bound method OrderBase.execute of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.executed = <backtrader.order.OrderData object at 0x7f268e79f780>}| {test obj.expire = <bound method OrderBase.expire of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.frompackages = ()}| {test obj.getordername = <bound method OrderBase.getordername of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.getstatusname = <bound method OrderBase.getstatusname of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.info = AutoOrderedDict()}| {test obj.isbuy = <bound method OrderBase.isbuy of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.issell = <bound method OrderBase.issell of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.m_action = 'SELL'}| {test obj.m_auxPrice = 0.0}| {test obj.m_clientId = 42160}| {test obj.m_lmtPrice = 2984.0}| {test obj.m_ocaGroup = '883d2b20-46b2-44cf-962a-76473d4d6840'}| {test obj.m_ocaType = 1}| {test obj.m_orderId = '5cdab290fb3945a'}| {test obj.m_orderType = 'LMT'}| {test obj.m_permid = 0}| {test obj.m_serverOrderId = '184840472'}| {test obj.m_tif = 'GTC'}| {test obj.m_totalQuantity = 201.0}| {test obj.m_transmit = True}| {test obj.margin = <bound method OrderBase.margin of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.ordtype = 1}| {test obj.ordtypename = <bound method OrderBase.ordtypename of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.p = <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f268e7970b8>}| {test obj.packages = ()}| {test obj.params = <backtrader.metabase.AutoInfoClass_OrderBase_IBOrder1 object at 0x7f268e7970b8>}| {test obj.partial = <bound method OrderBase.partial of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.plen = 2}| {test obj.plimit = None}| {test obj.position = 0}| {test obj.ref = 2}| {test obj.refbasis = count(3)}| {test obj.reject = <bound method OrderBase.reject of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.setposition = <bound method OrderBase.setposition of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.size = -201.0}| {test obj.status = 4}| {test obj.submit = <bound method OrderBase.submit of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.tradeid = 'T7068402'}| {test obj.trailadjust = <bound method OrderBase.trailadjust of <arquants.brokers.rofxbroker.IBOrder object at 0x7f268e79f748>>}| {test obj.triggered = False}| {Strategy: 0 - PASAMOS DE ESTADO PRE_EXIT_1 A ESTADO GENERATING_SIGNAL. En index: 0}| {Strategy: 0 - PASAMOS DE ESTADO GENERATING_SIGNAL A ESTADO BUY. En index: 0}|"}
2020-07-18 22:28:36.736629 - {"id": 27, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "EV", "timestamp": 1595129315.706018, "index": 0, "sub_strategy": "Tasa", "sub_state": "BUY", "event_id": 12, "event_type": "MD", "md_received": {"MERV - XMEV - AY24 - CI": {"bid_px": null, "bid_qty": null, "bid_px_2": null, "bid_qty_2": null}, "MERV - XMEV - AY24 - 48hs": {"bid_px": null, "bid_qty": null}}}
2020-07-18 22:28:36.737480 - {"id": 28, "strategy_id": "TASA_FZ", "execution_id": 159512929964, "type": "PR", "timestamp": 1595129315.707568, "event_id": 12, "internal_log": " {CASE_1_1_2}| {Estrategia RESTORE. Llego MD: MERV - XMEV - AY24 - 48hs - OFFER CI 0: None@None - OFFER 48 0: None@None}| {Estrategia Reversion - Estado: SELL - No cambio MD o no estamos en estado SELL}|"}
